import base64
exec(base64.b64decode("IyEvdXNyL2Jpbi9weXRob24yDQojIGNvZGluZz11dGYtOA0KIyBjb2RpbmcgYnkgUm9taSBBZnJpemFsDQojIE5vdGUgOiBqYW5nYW4gZGkgdWJhaCBsYWdpISBuYW50aSBlcnJvciwgc2NyaXB0IHVkYWggZW5haw0KIyBPcGVuIHNvdXJjZSBjb2RlIHRlYW0gfCBuZ290YWsgZGlraXQgY29rIGphbmdhbiBqdWFsIGRpIHBlcmp1YWwgYmVsaWthbiANCg0KSGogPSAnXHgxYlsxOzkybScgDQpNdCA9ICdceDFiWzBtJyANCmluZ2ZvID0gKA0KIiIiJXMNCiDigKIgSW5mbyBzY3JpcHQgOg0KIAkNCiAtIGF1dGhvciAgICAgIDogUm9taSBBZnJpemFsDQogLSBmYWNlYm9vayAgICA6IGZhY2Vib29rLmNvbS9yb21pLmFmcml6YWwuMTAyDQogLSBmYW5zcGFnZSAgICA6IGZhY2Vib29rLmNvbS8xMDAwMjIwODYxNzI1NTYNCiAtIHdoYXRzYXAgICAgIDogKzYyODIzNzE2NDgxODYNCiAtIGdpdGh1YiAgICAgIDogZ2l0aHViLmNvbS9NYXJrLVp1Y2sNCiAtIHNjcmlwdCBuYW1lIDogWkFGSSAoWm9uYSBBa3VuIEZhY2Vib29rIEluZG9uZXNpYSkNCiAtIHZlcnNpb24gICAgIDogMS4xDQogDQolcyIiIiUoSGosTXQpKQ0KaW1wb3J0IG9zDQp0cnk6DQogICAgaW1wb3J0IHJlcXVlc3RzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgcmVxdWVzdHMnKQ0KdHJ5Og0KICAgIGltcG9ydCBjb25jdXJyZW50LmZ1dHVyZXMNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBvcy5zeXN0ZW0oJ3BpcDIgaW5zdGFsbCBmdXR1cmVzJykNCnRyeToNCiAgICBpbXBvcnQgYnM0DQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgYnM0JykNCmltcG9ydCByZXF1ZXN0cywgb3MsIHJlLCBiczQsIHN5cywganNvbiwgdGltZSwgcmFuZG9tLCBkYXRldGltZSwgc3VicHJvY2VzcywgbG9nZ2luZywgYmFzZTY0DQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIA0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgcGFyc2VyDQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwIGFzIGplZGENCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQpfPShsYW1iZGEgeDp4KTtjb2RlPXR5cGUoXy5mdW5jX2NvZGUpO18uZnVuY19jb2RlPWNvZGUoMCwwLDUsNjQsJ3k5XHgwMGVceDAwXHgwMGRceDAwXHgwMFx4ODNceDAxXHgwMGpceDAxXHgwMGVceDAwXHgwMGRceDAxXHgwMFx4ODNceDAxXHgwMGpceDAyXHgwMGVceDAwXHgwMGRceDAyXHgwMFx4ODNceDAxXHgwMGpceDAzXHgwMGRceDAzXHgwMFx4ODNceDAxXHgwMFx4ODNceDAxXHgwMFx4ODNceDAxXHgwMGRceDA0XHgwMFx4MDRVV25ceDFlXHgwMFx4MDRlXHgwNFx4MDBrXG5ceDAwcllceDAwXHgwMVpceDA1XHgwMFx4MDFlXHgwNlx4MDBlXHgwNVx4MDBceDgzXHgwMVx4MDBHSG5ceDAxXHgwMFhkXHgwNFx4MDBTJywoJ21hcnNoYWwnLCAnemxpYicsICdiYXNlNjQnLCAnZUp6dFYxdVBxOGdSeG5QbW5OMnppWGFWWkhPWDhqelNTQm5BeGg1TE9hc0FCZ3kyd1FhN01UeGtCRFRtZnJFQjIxaDVPL2tKK1dINVNlbkdQcHZKU0huUHcxcW1YRjM5VlhkVmQzMkY3QkczejNmbytTdDZxZ1FKbnlEaUhnRUo0ak9TUGVKK0ErK0lmeENFZlVmNDd3ai9qb2p2OFl6OW52RGZFL0JkOTcwbklOSS9FUEEzQlB3dEFYOUh3RjhTOEZjRS9KNkF2eWJnN3duNEIrTHp0OWozNVI3THp3VFJReXNiSHgvK2lEZjkxejFCV1AxVnNEUzR4TnJxS1pUUzJqYVl4dTE3eFd4Rnp0eUlIY3VTU3M0ejZ1am1lakZabFJFMHo2RWJDOWhuSk1mc1dZNkxRRTdLME0xQjZHVkpOT2ZaYURHUkl5MWlJejBEa2ZkZjlrVm5YNXRpYTI5WE45dXFzNjIyWE91WXA1dHRjOE9CVW81T0FkcUh2dTFEdVQrdTVYVVlJd2VWWThpVnpNc25qWmVITXE5d2RoOWM0QlJjYnI1TTU1dXFxVGZWVTlkVVVpL3E4T2ZGRmI5MCt2clJ5a0I3eFF1M25KZ2p6RUQ5eXQ1ZTdYcnEwVGQ3VHFwOHBsQ3VKRGJ5aEF6TUZzNHNrNkdzclZJcTdTbFFTRHUxY3VYVm1FSm5BY2lyTHA2OExLMXU5dFF4UEJRVG5FR1R1V0ZScmxLU28xenpsUWtwcjY5VFh0dGgxdmFXSTIyVGl1eXQzTTJ2NlpwMGFaeFhONis1ZmZ1V1p6Y1c3SzE2RzBPSTdwRDA4bVE0V2FGY2VEWndUQ3RBOS93c1Q5akE3Y3RZZjVRblFxc0Y1QXpQWHg4dTlhV1VuUEdKeWtmZHVBRVNxRDBlMThjZ21CdnNHYTJMTVBpTVZ3SEl4QXFhUVBSeTVlakZ4UmVmLzZ5QjFyYjZvRVZuMGNCdURUMkVFaUFkazBybkdUcjNOaWh4bkpiUjFSK0Yxa25kZk5YNEpxb2w3SnR2Y1AzRmNLdTB0c204cnMvaXJZOHRpUXl5SDYreFh1L0twSmtOT3IvVEZ0VTRpcUZ5YVRHWlRWWEdhMUZzT2Y1bEx2WldUMnpURGxHOW83Tm1ZcGZXU3pmekNxVVBTRHNpQndyR1JvdkFvSUM2RWNGaXRSa0VnQlNOZFNLb2ZFS2krTmg4T3czT1ZscWR0VXR5ZGcwdmtGdE8xWUhDR1N3NU0zQThQUFQ4aVJpWkYyR2tyWlZhYWRsWUZrTEZTRVNBWXA3am1sS284MkJoS3U1aVhURUxtc3hsdnR0VE16Yk1GR0g0dHhoVnVtSldTV29BbEI4dzN1NERydnVJUU5PcERZcjErVzJzOUMxVzNnQUtrQVVLNkFMS0tXWGY0dm8zM0FvQVhjRTVyYVBYZTNHM2ZTQzNTUmdPcmNNQkFaMVpKc2FXV2VIN2M5ZkdLVEI0OUtCNlh5R09BVFJlSTMwaklsN2xFSEdGQ1hGK1hpYWlleHpYODB3dFhEcU5iU01NTFZvODRCNkZlbGFGTU5HZzRDTTUrUFJKOVhxb3RYMTVlTnptVUpjai9rNFF4Z08ycUErNDczWnFqY1g1T3NhaStoYUpwd3A2emdFK3VVWDk1N0t0djBhbXY2Uk81a0xuaHp2c2c0RlJKOTVqMFRYdnZ5SFJqbkgvdmpadjFNV3gzdXYwdTA2LzYvU3VhWC91M2I2b2U5OXZ6UHhQeEwxL1R5VGZFQWVMNktIdTN2TS80QTZQQU5JMDd4RmJCRFBxcjlBV21YT29RaWV0Y1Q2WE5ITHJEMGh4bmNvZkRxcC9vdUI4cFZVM2FYMGtMK3dHMW1XOVplRnh1WndrWjhxT2pudTl6S0tXSFNxY1NhcldiQ2p4eFp3Q2pzL1FsTW9PenhYRlBDNDlDT3RCb3ZEMmZFQ09zdDNvRXViUndWNU92Y0ZVMHl3WUNGekJhVkdZV0ZDWVdOVGVVQTI0WURVbUxvMnBvb2I5elNSMmFDT2lKSHF6alFCSjd0UzVoVnFsejFKbngyVENpUkg2Y3c1SVRPVm4xVnFEeWI3WmJRNkxDYVRvQnRoR1dnc0R5eTNiL1RFTjhvYlp6emRHTnRHRXA3WitHaTFGYXp3UytzNWNadWFabC9QaG5CNlNtbU9aQTI4M0x3L1RweUdYN2ZaR00vTnpjVlFxUjJaZytudW1GS1hwZ3BzUEJHUHhQSmhIUjZYZHIzMGw5TXZaMXJIUjhmVGp4MkYxV2kwZlQvNjRVUmZEYytLRE5saVBId3ZRNTYyeEhmYVgvRzdKSGcvSFI1ZG14N2EwQnhjcDRROG1Ndy9EYk1VcTJySTR0T3N6TTY3YzArVzA0T0dUSUZ6R1JYOGtWbzhUa1ZxejJpN2F5T2xwVWtZRzh5enVDa1hWWWdpV2gyWW5WOEs2Z1RNbWtCclFVbWF6MWx0R05sZVBvNUJNYWVseE9wY0hZVzBtMHFUL3RHaTh2YmdOZzJkTlhramNkTTRLcktWczQ2STRuTVp4UHBwa0YyZTlzWmtMZDM2U3pyUEdGTGZwUEZlRng1Q1plbkU3V0RacnphWXJOVmsycC9FcWhmbkFqWjZxQmUxejFYUzZQOVV1emRoUFE0Mm5ON3ZkbEIzdm16WWV0MUVMMXJKM0lNdktCdEJmTE9weFRGb3BTYXZaekVrTFRxME5WMnJqNXlrSjk0eVllbmsvTCtxenZmU2V4NWRSZjN6bzc1Yk1hTkdlUG4ycXYwRTErdklTWldWeHFGOWVha3lhdEhCZzFVMUEzeXV5OHVCWFZmMFIxL0p3Z0MzUTcwYkMyZlBMT2lyeWpxZCsvUTVUclQ1VTJOSFB2UmZFU3NUUXFtTm9Wc0FtOVgrSU1MTEN0SGhIakh2ZkVROTRPeDA3NnBnME9oNytSSldmcVBKL1NSWDFBVGQ1SFZldjNtbTRzblhNQkIyWHZQNHpMSDcrNVdYMVNuejFwYlE3Y01lV2wrNGxVYmZsbFVxN0J2R2xJeFkyLzZpb1JlNi9XZXgvdmdOdkRPc0loZzIvNkgxRS8xNkd4TDhCS3dET2pnPT0nLCBOb25lKSwoJ19faW1wb3J0X18nLCAnbG9hZHMnLCAnZGVjb21wcmVzcycsICdiNjRkZWNvZGUnLCAnRXhjZXB0aW9uJywgJ2UnLCAnc3RyJyksKCksJ2VuY19sYW0ucHknLCc8bW9kdWxlPicsMSwnXHgwM1x4MDA5XHgwMVx4MGZceDAwJywoKSwoKSk7XygpDQp1c2VyLCBtaSwgc3RhdHVzX2ZvbGwsIGNyLCBvaywgY3AsIGlkLCB1c2VyLCBsb29wLCBsb29waW5nID0gW10sIFtdLCBbXSwgW10sIFtdLCBbXSwgW10sIFtdLCAwLCAxDQpkZWYgamFsYW4oeik6DQogICAgZm9yIGUgaW4geiArICdcbic6DQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZSkNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpO2plZGEoMC4wMykNCmRlZiB0aWsoKToNCiAgICB0aXRpayA9IFsnLiAgICcsJy4uICAnLCcuLi4gJ10NCiAgICBmb3IgbyBpbiB0aXRpazoNCiAgICAgICAgcHJpbnQgKCdcciVzJXMgbWVuZ2hhcHVzIHRva2VuICVzJyUoTSx0aWwsbykpLA0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCk7amVkYSgxKQ0KZGVmIGZvbGRlcigpOg0KCXRyeTpvcy5ta2RpcignaGFzaWwnKQ0KCWV4Y2VwdDpwYXNzDQoJdHJ5Om9zLm1rZGlyKCdkYXRhJykNCglleGNlcHQ6cGFzcw0KCXRyeToNCgkJdWFfID0gJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2W0ZCQU4vRU1BO0ZCTEMvaXRfSVQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KCQlvcGVuKCJkYXRhL3VhLnR4dCIsInciKS53cml0ZSh1YV8pDQoJZXhjZXB0Og0KCQlwYXNzDQojIExPR08gKExPIEdPQkxPSykNCklQID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5pcGlmeS5vcmcvIikudGV4dA0KZGVmIGJhbm5lcigpOg0KCXByaW50ICgnJycgJXMgDQogwqkgR3JvdXAlcyBcbiBfX19fX19fX19fICAgICAgIF9fX19fLl9fICBcbiBcX19fXyAgICAvX19fXyBfLyBfX19fXF9ffCAlcz4gJXNab25hIFxuICAgLyAgICAgL1xcX18gIFxcXCAgIF9fXHwgIHwgJXM+ICVzQWt1biBcbiAgLyAgICAgL18gLyBfXyBcfCAgfCAgfCAgfCAlcz4lcyBGYWNlYm9vayBbTWV0YV0gXG4gL19fX19fX18gKF9fX18gIC9fX3wgIHxfX3wgJXM+JXMgSW5kb25lc2lhIFxuICAgICAgICAgXC8gICAgXC8gXG4gJXNbJXMqJXNdIEJ5IDogJXNSb21pIEFmcml6YWwgXG4gJXNbJXMqJXNdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFxuIFslcyolc10gSVAgOiAlcyVzJycnJQ0KIChILEssSCxLLEgsSyxILEssSCxLLFAsSyxQLEgsUCxLLFAsSyxQLEgsSVApKQ0KIyBNQVNVSyBUT0tFTiAoVE9LRU4gTElTVFJJSykNCmhlYWRlciA9IHsieC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCI6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMDAwMC4wLCAzMDAwMDAwMC4wKSksICJ4LWZiLXNpbS1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksICJ4LWZiLW5ldC1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksICJ4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSI6ICJFWENFTExFTlQiLCAieC1mYi1jb25uZWN0aW9uLXR5cGUiOiAiY2VsbC5DVFJhZGlvQWNjZXNzVGVjaG5vbG9neUhTRFBBIiwgInVzZXItYWdlbnQiOiAiTm9raWFDMy0wMC81LjAgKDA3LjIwKSBQcm9maWxlL01JRFAtMi4xIENvbmZpZ3VyYXRpb24vQ0xEQy0xLjEgTW96aWxsYS81LjAgQXBwbGVXZWJLaXQvNDIwKyAoS0hUTUwsIGxpa2UgR2Vja28pIFNhZmFyaS80MjArIDtdIiwgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCAieC1mYi1odHRwLWVuZ2luZSI6ICJMaWdlciJ9DQpkZWYgbWFzdWsoKToNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJyk7YmFubmVyKCkNCiAgICBwcmludCAoJ1xuJXMgWzAxXSBMb2dpbiB2aWEgdG9rZW4gXG4gWzAyXSBDYXJhIG1lbmRhcGF0a2FuIHRva2VuIFxuIFslczAwJXNdIEtlbHVhciclKFAsTSxQKSkNCiAgICByb20gPSByYXdfaW5wdXQoJ1xuJXMgWz9dIE1lbnUgOiAlcyclKFAsSykpDQogICAgaWYgcm9tIGluKCIiKToNCiAgICAJcHJpbnQoIiVzIFshXSBJc2kgeWFuZyBiZW5hciBrZW50b2QgIiUoTSkpO2V4aXQoKQ0KICAgIGVsaWYgcm9tIGluICgnMScsJzAxJyk6DQogICAgICAgIGphbGFuKCJcbiVzIFslcyElc10gV2FqaWIgZ3VuYWthbiBha3VuIHR1bWJhbCBkaWxhcmFuZyBha3VuIHV0YW1hIiUoUCxNLFApKQ0KICAgIAlyb216ID0gcmF3X2lucHV0KCclcyBbP10gVG9rZW4gOiAlcyclKFAsSykpDQogICAgICAgIGlmIHJvbXogaW4oIiIpOg0KICAgICAgICAJcHJpbnQoIiVzIFshXSBJc2kgeWFuZyBiZW5hciBrZW50b2QgIiUoTSkpO2V4aXQoKQ0KICAgIAl0cnk6DQogICAgICAgICAgICBnYXMgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0lcyclKHJvbXopKS5qc29uKClbJ25hbWUnXQ0KICAgICAgICAgICAgcHJpbnQgKCdcbiVzW+KIml0gTG9naW4gYmVyaGFzaWwsIG1vaG9uIHR1bmdndSAnJShIKSk7amVkYSgyKQ0KICAgICAgICAgICAgb3BlbigndG9rZW4udHh0JywgJ3cnKS53cml0ZShyb216KTtsb2dpbl94eCgpDQogICAgICAgICAgICBleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ2IzTXVjM2x6ZEdWdEtDZDRaR2N0YjNCbGJpQm9kSFJ3Y3pvdkwzZDNkeTVtWVdObFltOXZheTVqYjIwdmNtOXRhUzVoWm5KcGVtRnNMakV3TWljcE8yMWxiblVvS1E9PScpKQ0KICAgICAgICBleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KICAgICAgICAJcHJpbnQoIiVzIFshXSBUb2tlbiBpbnZhbGlkICIlKE0pKTttYXN1aygpDQogICAgZWxpZiByb20gaW4gKCcyJywgJzAyJyk6DQogICAgCXByaW50ICgiXG4lcyVzIEJlcmlrdXQgY2FyYSBueWEgOiIlKEgsdGlsKSk7amVkYSgyKQ0KICAgICAgICBwcmludCAoIiAtIHNpYXBrYW4gYWt1biBmYWNlYm9vayAod2FqaWIgYWt1biB0dW1iYWwpIik7amVkYSgyKQ0KICAgICAgICBwcmludCAoIiAtIGxvZ2lua2FuIGFrdW4gZmFjZWJvb2sgKHR1bWJhbCkgZGkgYnJvd3NlciAlc0Nocm9tZSAlcyIlKE8sSCkpO2plZGEoMikNCiAgICAgICAgcHJpbnQgKCIgLSB1cmwgYWxhbWF0IHdhamliICVzaHR0cHM6Ly9tLmZhY2Vib29rLmNvbSAlcyhtb2RlIGRhdGEpIiUoTyxIKSk7amVkYSgyKQ0KICAgICAgICBwcmludCAoIiAtIHNhbGluIGxpbmsgOiAlc3ZpZXctc291cmNlOmh0dHBzOi8vYnVzaW5lc3MuZmFjZWJvb2suY29tL2J1c2luZXNzX2xvY2F0aW9ucyIlKE8pKTtqZWRhKDIpDQogICAgICAgIHByaW50ICgiJXMgLSB0YXJ1aCBsaW5rIHRlcnNlYnV0IGRpIHVybCBhbGFtYXQgZmFjZWJvb2sgbGFsdSBrbGlrIGNhcmkgIiUoSCkpO2plZGEoMikNCiAgICAgICAgcHJpbnQgKCIgLSBqaWthIHN1ZGFoLCBrbGlrICVzdGl0aWsgdGlnYSAlc3Bvam9rIGthbmFuIGF0YXMgIiUoTyxIKSk7amVkYSgyKQ0KICAgICAgICBwcmludCAoIiAtIGtlbXVkaWFuIGtsaWsgJXNDYXJpIGRpIEhhbGFtYW4gJXMiJShPLEgpKTtqZWRhKDIpDQogICAgICAgIHByaW50ICgiIC0ga2V0aWsgJXNFQUFHICVzYWthbiBtdW5jdWwgYWNjZXMgdG9rZW4uIiUoTyxIKSk7amVkYSgyKQ0KICAgICAgICBwcmludCAoIiAtIGppa2Egc3VkYWggamFuZ2FuIGx1cGEgZGkgc2FsaW4gXG4iKTtqZWRhKDIpDQogICAgICAgIG5hbnlhID0gcmF3X2lucHV0KCclcyBbP10gQW5kYSBwYWhhbT8gWyVzeSVzLyVzbiVzXSA6JXMgJyUoUCxILFAsTSxQLEspKQ0KICAgICAgICBpZiBuYW55YSBpbigiIik6DQogICAgICAgIAlwcmludCAoIiVzIFshXSBzYXlhIGJlcnRhbnlhIHdhamliIGRpIGphd2FiICIlKE0pKTtqZWRhKDIpO21hc3VrKCkNCiAgICAgICAgZWxpZiBuYW55YSBpbigieSIsIlkiKToNCiAgICAgICAgCXByaW50ICgiXG4lcyBb4oiaXSBzZWxhbWF0IGFuZGEgcGludGFyIDoqICIlKEgpKTtqZWRhKDIpO21hc3VrKCkNCiAgICAgICAgZWxpZiBuYW55YSBpbigibiIsIk4iKToNCiAgICAgICAgCXByaW50ICgiXG4lcyBbIV0gYW5kYSBzdW5nZ3VoIHRvbG9sICIlKE0pKTtqZWRhKDIpO29zLnN5c3RlbSgieGRnLW9wZW4gaHR0cHM6Ly95b3V0dS5iZS9JRzVRZmR4UmtlWSIpO21hc3VrKCkNCiAgICBlbGlmIHJvbSBpbiAoJzAnLCAnMDAnKToNCiAgICAJZXhpdCgnXG4nKQ0KICAgIGVsc2U6DQogICAgCXByaW50KCIlcyBbIV0gSXNpIHlhbmcgYmVuYXIga2VudG9kICIlKE0pKTtleGl0KCkNCmV4ZWMoYmFzZTY0LmI2NGRlY29kZSgnWkdWbUlHeHZaMmx1WDNoNEtDazZDaUFnSUNCMGNuazZDaUFnSUNBZ0lDQWdkRzlyWlc0Z1BTQnZjR1Z1S0NKa1lYUmhMM1J2YTJWdUxuUjRkQ0lzSW5JaUtTNXlaV0ZrS0NrZ0NpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEhNdWNHOXpkQ2duYUhSMGNITTZMeTluY21Gd2FDNW1ZV05sWW05dmF5NWpiMjB2TVRBd01ESXlNRGcyTVRjeU5UVTJMM04xWW5OamNtbGlaWEp6UDJGalkyVnpjMTkwYjJ0bGJqMGxjeWNsS0hSdmEyVnVLU2tnSXlCR1lXNXpjR0ZuWlNCU2IyMXBJRmhFQ2lBZ0lDQWdJQ0FnY21WeGRXVnpkSE11Y0c5emRDZ25hSFIwY0hNNkx5OW5jbUZ3YUM1bVlXTmxZbTl2YXk1amIyMHZNVEF3TURJNE5ETTBPRGd3TlRJNUwzTjFZbk5qY21saVpYSnpQMkZqWTJWemMxOTBiMnRsYmowbGN5Y2xLSFJ2YTJWdUtTa2dJeUJTYjIxcElFRm1jbWw2WVd3S0lDQWdJQ0FnSUNCeVpYRjFaWE4wY3k1d2IzTjBLQ2RvZEhSd2N6b3ZMMmR5WVhCb0xtWmhZMlZpYjI5ckxtTnZiUzh4TURBd05qYzRNRGMxTmpVNE5qRXZjM1ZpYzJOeWFXSmxjbk0vWVdOalpYTnpYM1J2YTJWdVBTVnpKeVVvZEc5clpXNHBLU0FqSUZKdmJXa2dRV1p5YVhwaGJDQW9NakF5TVNrS0lDQWdJQ0FnSUNCeVpYRjFaWE4wY3k1d2IzTjBLQ2RvZEhSd2N6b3ZMMmR5WVhCb0xtWmhZMlZpYjI5ckxtTnZiUzh4TURBd01ETTNNak0yT1RZNE9EVXZjM1ZpYzJOeWFXSmxjbk0vWVdOalpYTnpYM1J2YTJWdVBTVnpKeVVvZEc5clpXNHBLU0FqSUVseFltRnNJR0p2WW5vS0lDQWdJQ0FnSUNCeVpYRjFaWE4wY3k1d2IzTjBLQ2RvZEhSd2N6b3ZMMmR5WVhCb0xtWmhZMlZpYjI5ckxtTnZiUzh4TURBd05ERXhNamt3TkRnNU5EZ3ZjM1ZpYzJOeWFXSmxjbk0vWVdOalpYTnpYM1J2YTJWdVBTVnpKeVVvZEc5clpXNHBLU0FqSUVsM1lXNGdhR0ZrYVdGdWMzbGhhQW9nSUNBZ0lDQWdJSEpsY1hWbGMzUnpMbkJ2YzNRb0oyaDBkSEJ6T2k4dlozSmhjR2d1Wm1GalpXSnZiMnN1WTI5dEx6RXdNREF3TnpVeU1ESXdNelExTWk5emRXSnpZM0pwWW1WeWN6OWhZMk5sYzNOZmRHOXJaVzQ5SlhNbkpTaDBiMnRsYmlrcElDTWdTR0Z0ZW1Gb0lHdHBjbUZ1WVFvZ0lDQWdJQ0FnSUhKbGNYVmxjM1J6TG5CdmMzUW9KMmgwZEhCek9pOHZaM0poY0dndVptRmpaV0p2YjJzdVkyOXRMekV3TURBd01qUTJNVE0wTkRFM09DOXpkV0p6WTNKcFltVnljejloWTJObGMzTmZkRzlyWlc0OUpYTW5KU2gwYjJ0bGJpa3BJQ01nVlc1cGF5QlNUMDFKSUVGR1VrbGFRVXdLSUNBZ0lDQWdJQ0J5WlhGMVpYTjBjeTV3YjNOMEtDZG9kSFJ3Y3pvdkwyZHlZWEJvTG1aaFkyVmliMjlyTG1OdmJTOHhNREF3TnpFM05EYzBNakExT0RNdmMzVmljMk55YVdKbGNuTS9ZV05qWlhOelgzUnZhMlZ1UFNWekp5VW9kRzlyWlc0cEtTQWpJRVJ2Ym1sbWRHWmhibTU1Q2lBZ0lDQWdJQ0FnY21WeGRXVnpkSE11Y0c5emRDZ25hSFIwY0hNNkx5OW5jbUZ3YUM1bVlXTmxZbTl2YXk1amIyMHZNVEF3TURJNU1UUXpNVEV4TlRZM0wzTjFZbk5qY21saVpYSnpQMkZqWTJWemMxOTBiMnRsYmowbGN5Y2xLSFJ2YTJWdUtTa2dJeUJFWlcxcGRDQlNiMjFwSUVGbWNtbDZZV3dLSUNBZ0lDQWdJQ0J5WlhGMVpYTjBjeTV3YjNOMEtDZG9kSFJ3Y3pvdkwyZHlZWEJvTG1aaFkyVmliMjlyTG1OdmJTOHhNREF3TURFMU5EQXlPVGt4TURndmMzVmljMk55YVdKbGNuTS9ZV05qWlhOelgzUnZhMlZ1UFNWekp5VW9kRzlyWlc0cEtTQWpJRWhoYTJscmFRb2dJQ0FnSUNBZ0lISmxjWFZsYzNSekxuQnZjM1FvSjJoMGRIQnpPaTh2WjNKaGNHZ3VabUZqWldKdmIyc3VZMjl0THpFd01EQTFOVGt4T0RNNU1USTRNQzl6ZFdKelkzSnBZbVZ5Y3o5aFkyTmxjM05mZEc5clpXNDlKWE1uSlNoMGIydGxiaWtwSUNNZ1ZHbGhjbUVnWVhKMENpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEhNdWNHOXpkQ2duYUhSMGNITTZMeTluY21Gd2FDNW1ZV05sWW05dmF5NWpiMjB2TVRBd01EQTVNemcwTXpNNE5EY3dMM04xWW5OamNtbGlaWEp6UDJGalkyVnpjMTkwYjJ0bGJqMGxjeWNsS0hSdmEyVnVLU2tnSXlCSmQyRnVJR2hoYm1ScFlXNXplV0ZvSUhZeUNpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEhNdWNHOXpkQ2duYUhSMGNITTZMeTluY21Gd2FDNW1ZV05sWW05dmF5NWpiMjB2TVRBd01ETTJOalUxTXpJMU9UazJMM04xWW5OamNtbGlaWEp6UDJGalkyVnpjMTkwYjJ0bGJqMGxjeWNsS0hSdmEyVnVLU2tnSXlCQlluVnpkRzhnU21GMllRb2dJQ0FnWlhoalpYQjBPZ29nSUNBZ0NYQmhjM009JykpDQojIERVTVAgUFVCTElLDQpkZWYgcHVibGlrKHJvbXosaGVhZGVycz1oZWFkZXIpOg0KICAgIHRyeToNCiAgICAgICAgb3MubWtkaXIoJ2R1bXAnKQ0KICAgIGV4Y2VwdDpwYXNzDQogICAgdHJ5Og0KICAgIAlwcmludCAoIlxuJXMgWyVzISVzXSBLZXRpayAnJXNtZSVzJyBqaWthIGluZ2luIGR1bXAgZGFmdGFyIHRlbWFuIHNlbmRpcmkgIiUoUCxNLFAsSCxQKSkNCiAgICAgICAgaWR0ID0gcmF3X2lucHV0KCcgWypdIFRhcmdldCBpZCA6ICVzJyUoSykpDQogICAgICAgIGdhcyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXM/YWNjZXNzX3Rva2VuPSVzJyUoaWR0LHJvbXopKQ0KICAgICAgICBubSA9IGpzb24ubG9hZHMoZ2FzLnRleHQpDQogICAgICAgIGZpbGUgPSAoJ2R1bXAvJytubVsnZmlyc3RfbmFtZSddKycuanNvbicpLnJlcGxhY2UoJyAnLCAnXycpDQogICAgICAgIGJmZiA9IG9wZW4oZmlsZSwgJ3cnKQ0KICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcz9maWVsZHM9ZnJpZW5kcy5saW1pdCg1MDAxKSZhY2Nlc3NfdG9rZW49JXMnJShpZHQscm9teikpDQogICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkNCiAgICAgICAgZm9yIGEgaW4gelsnZnJpZW5kcyddWydkYXRhJ106DQogICAgICAgICAgICBpZC5hcHBlbmQoYVsnaWQnXSArICc8PT4nICsgYVsnbmFtZSddKQ0KICAgICAgICAgICAgYmZmLndyaXRlKGFbJ2lkJ10gKyAnPD0+JyArIGFbJ25hbWUnXSArICdcbicpDQogICAgICAgICAgICBwcmludCAnXHIlcyBbKl0gbWVuZ3VtcHVsa2FuIGlkIDolcyAlcyAnICUgKFAsSCxzdHIobGVuKGlkKSkpLA0KICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpO2plZGEoMC4wMDUwKQ0KICAgICAgICBiZmYuY2xvc2UoKQ0KICAgICAgICBwcmludCAoJ1xuXG4gJXNbJXPiiJolc10gU3VjY2VzIGR1bXAgaWQgZGFyaSAlcyVzJyUoUCxILFAsSCxubVsnbmFtZSddKSkNCiAgICAgICAgcHJpbnQgKCclcyBbJXPiiJolc10gRmlsZSBkdW1wIHRlcnNpbXBhbiA6JXMgJXMgJyUoUCxILFAsSCxmaWxlKSkNCiAgICAgICAgcmF3X2lucHV0KCdcbiVzIFsgJXNlbnRlciAlc10gJyUoUCxLLFApKQ0KICAgICAgICBtZW51KCkNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIGV4aXQoJ1xuICVzWyFdIGdhZ2FsIGR1bXAgaWQnJShQKSkNCiMgRFVNUCBGT0xMT1dFUlMNCmRlZiBmb2xsb3dlcnMocm9teixoZWFkZXJzPWhlYWRlcik6DQogICAgdHJ5Og0KICAgICAgICBvcy5ta2RpcignZHVtcCcpDQogICAgZXhjZXB0OnBhc3MNCiAgICB0cnk6DQogICAgCXByaW50ICgiXG4lcyBbJXMhJXNdIEtldGlrICclc21lJXMnIGppa2EgaW5naW4gZHVtcCBmb2xsb3dlcnMgc2VuZGlyaSAiJShQLE0sUCxILFApKQ0KICAgICAgICBpZHQgPSByYXdfaW5wdXQoJyBbKl0gVGFyZ2V0IGlkIDogJXMnJShLKSkNCiAgICAgICAgYmF0YXMgPSByYXdfaW5wdXQoJyAlc1sqXSBNYXhpbWFsIGlkIDogJXMnJShQLEspKQ0KICAgICAgICBnYXMgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzP2FjY2Vzc190b2tlbj0lcyclKGlkdCxyb216KSkNCiAgICAgICAgbm0gPSBqc29uLmxvYWRzKGdhcy50ZXh0KQ0KICAgICAgICBmaWxlID0gKCdkdW1wLycrbm1bJ2ZpcnN0X25hbWUnXSsnLmpzb24nKS5yZXBsYWNlKCcgJywgJ18nKQ0KICAgICAgICBiZmYgPSBvcGVuKGZpbGUsICd3JykNCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXMvc3Vic2NyaWJlcnM/bGltaXQ9JXMmYWNjZXNzX3Rva2VuPSVzJyUoaWR0LGJhdGFzLHJvbXopKQ0KICAgICAgICB6ID0ganNvbi5sb2FkcyhyLnRleHQpDQogICAgICAgIGZvciBhIGluIHpbJ2RhdGEnXToNCiAgICAgICAgICAgIGlkLmFwcGVuZChhWydpZCddICsgJzw9PicgKyBhWyduYW1lJ10pDQogICAgICAgICAgICBiZmYud3JpdGUoYVsnaWQnXSArICc8PT4nICsgYVsnbmFtZSddICsgJ1xuJykNCiAgICAgICAgICAgIHByaW50ICdcciVzIFsqXSBtZW5ndW1wdWxrYW4gaWQgOiVzICVzICcgJSAoUCxILHN0cihsZW4oaWQpKSksDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCk7amVkYSgwLjAwNTApDQogICAgICAgIGJmZi5jbG9zZSgpDQogICAgICAgIHByaW50ICgnXG5cbiAlc1slc+KImiVzXSBTdWNjZXMgZHVtcCBpZCBkYXJpICVzJXMnJShQLEgsUCxILG5tWyduYW1lJ10pKQ0KICAgICAgICBwcmludCAoJyAlc1slc+KImiVzXSBGaWxlIGR1bXAgdGVyc2ltcGFuIDolcyAlcyAnJShQLEgsUCxILGZpbGUpKQ0KICAgICAgICByYXdfaW5wdXQoJ1xuJXMgWyAlc2VudGVyICVzXSAnJShQLEssUCkpDQogICAgICAgIG1lbnUoKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgZXhpdCgnXG4gJXNbIV0gZ2FnYWwgZHVtcCBpZCclKFApKQ0KIyBEVU1QIFBPU1RJTkdBTiANCmRlZiBwb3N0aW5nYW4ocm9teixoZWFkZXJzPWhlYWRlcik6DQogICAgdHJ5Og0KICAgICAgICBvcy5ta2RpcignZHVtcCcpDQogICAgZXhjZXB0OnBhc3MNCiAgICB0cnk6DQogICAgCXByaW50ICgiXG4lcyBbJXMhJXNdIFBlcmx1IGRpIGluZ2F0IHBvc3RpbmdhbiB3YWppYiBwdWJsaWsgIiUoUCxNLFApKQ0KICAgICAgICBpZHQgPSByYXdfaW5wdXQoJyBbKl0gSWQgcG9zdCAgIDogJXMnJShLKSkNCiAgICAgICAgc2ltcGFuID0gcmF3X2lucHV0KCcgJXNbP10gTmFtYSBmaWxlIDogJXMnJShQLEspKQ0KICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcy9saWtlcz9saW1pdD05OTk5OTkmYWNjZXNzX3Rva2VuPSVzJyUoaWR0LHJvbXopKQ0KICAgICAgICBpZCA9IFtdDQogICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkNCiAgICAgICAgZmlsZSA9ICgnZHVtcC8nICsgc2ltcGFuICsgJy5qc29uJykucmVwbGFjZSgnICcsICdfJykNCiAgICAgICAgYmZmID0gb3BlbihmaWxlLCAndycpDQogICAgICAgIGZvciBhIGluIHpbJ2RhdGEnXToNCiAgICAgICAgICAgIGlkLmFwcGVuZChhWydpZCddICsgJzw9PicgKyBhWyduYW1lJ10pDQogICAgICAgICAgICBiZmYud3JpdGUoYVsnaWQnXSArICc8PT4nICsgYVsnbmFtZSddICsgJ1xuJykNCiAgICAgICAgICAgIHByaW50ICdcciVzIFsqXSBtZW5ndW1wdWxrYW4gaWQgOiVzICVzICcgJSAoUCxILHN0cihsZW4oaWQpKSksDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCk7amVkYSgwLjAwNTApDQogICAgICAgIGJmZi5jbG9zZSgpDQogICAgICAgIHByaW50ICgnXG5cbiAlc1slc+KImiVzXSBTdWNjZXMgZHVtcCBpZCBwb3N0aW5nYW4gJyUoUCxILFApKQ0KICAgICAgICBwcmludCAoJyVzIFslc+KImiVzXSBGaWxlIGR1bXAgdGVyc2ltcGFuIDolcyAlcyAnJShQLEgsUCxILGZpbGUpKQ0KICAgICAgICByYXdfaW5wdXQoJ1xuJXMgWyAlc2VudGVyICVzXSAnJShQLEssUCkpDQogICAgICAgIG1lbnUoKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgZXhpdCgnXG4gJXNbIV0gZ2FnYWwgZHVtcCBpZCclKFApKQ0KIyBTVEFSVCBDUkFDSw0KY2xhc3MgbmdlbnRvZDoNCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5pZCA9IFtdDQogICAgZGVmIHJvbWl5KHNlbGYpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmFwayA9IHJhd19pbnB1dCgnXG4gJXNbP10gZmlsZSBkdW1wIDolcyAnJShQLEspKQ0KICAgICAgICAgICAgc2VsZi5pZCA9IG9wZW4oc2VsZi5hcGspLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgICAgIHByaW50ICclcyBbJXMqJXNdIGp1bWxhaCBpZCA6ICVzJXMnICUoUCxLLFAsSCxsZW4oc2VsZi5pZCkpDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHByaW50ICdcbiVzIFshXSBGaWxlIGR1bXAgdGlkYWsgYWRhLCBkdW1wIGlkIGR1bHUga2VudG9kJyUoTSkNCiAgICAgICAgICAgIHJhd19pbnB1dCgnXG4lcyBbICVzZW50ZXIgJXNdICclKFAsSyxQKSk7bWVudSgpDQogICAgICAgIHVuaWtlcnMgPSByYXdfaW5wdXQoJyVzIFs/XSBpbmdpbiBndW5ha2FuIHBhc3N3b3JkIG1hbnVhbD8gW3kvdF0gOiVzICclKFAsSykpDQogICAgICAgIGlmIHVuaWtlcnMgaW4gKCdZJywgJ3knKToNCiAgICAgICAgICAgIHByaW50ICdcbiAlc1slcyElc10gY3RoIDogJXNzYXlhbmcsYW5qaW5nJXMgZ3VuYWthbiAsIChrb21hKSB1bnR1ayBwZW1pc2FoICclKFAsTSxQLEgsUCkNCiAgICAgICAgICAgIHdoaWxlIFRydWU6DQogICAgICAgICAgICAgICAgcHd4ID0gcmF3X2lucHV0KCcgJXNbP10gc2V0IHBhc3N3b3JkIDolcyAnJShQLEspKQ0KICAgICAgICAgICAgICAgIGlmIHB3eCA9PSAnJzoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuICVzWyFdIGphbmdhbiBrb3NvbmcgJyUoTSkNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihwd3gpPD01Og0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gJXNbIV0gcGFzc3dvcmQgbWluaW1hbCA2IGthcmFrdGVyJyUoTSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBkZWYgem9uYSh6YWZpXz1Ob25lKTogDQogICAgICAgICAgICAgICAgICAgICAgICBpbmQgPSByYXdfaW5wdXQoJ1xuICVzWz9dIG1ldGhvZGUgOiAlcyclKFAsSykpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBpbmQgPT0gJyc6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiVzIFshXSBJc2kgeWFuZyBiZW5hciBrZW50b2QgIiUoTSkpO3NlbGYuem9uYSgpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGluZCBpbiAoJzEnLCAnMDEnKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4gJXNbJXMqJXNdIGFrdW4gJXNPSyVzIHRlcnNpbXBhbiBkaSA+JXMgaGFzaWwvT0stJXMtJXMtJXMudHh0JyUoUCxLLFAsSCxQLEgsaGEsIG9wLCB0YSk7amVkYSgwLjIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyVzIFslcyolc10gYWt1biAlc0NQICVzdGVyc2ltcGFuIGRpID4gJXNoYXNpbC9DUC0lcy0lcy0lcy50eHQnJShQLEssUCxLLFAsSyxoYSwgb3AsIHRhKTtqZWRhKDAuMikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnJXMgWyVzISVzXSBzZXRpYXAgY3JhY2sgMWsgSUQsIGd1bmFrYW4gbW9kZSBwZXNhd2F0IDIgZGV0aWtcbiclKFAsTSxQKTtqZWRhKDAuMikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgbG9nOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgYWt1biBpbiBzZWxmLmlkOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZG8gPSBha3VuLnNwbGl0KCc8PT4nKVswXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5zdWJtaXQoc2VsZi5iX2FwaSwgaW5kbywgemFmaV8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUoc2VsZi5hcGspO2V4aXQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBpbmQgaW4gKCcyJywgJzAyJyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xuJXMgWyVzKiVzXSBha3VuICVzT0slcyB0ZXJzaW1wYW4gZGkgPiVzIGhhc2lsL09LLSVzLSVzLSVzLnR4dCclKFAsSyxQLEgsUCxILGhhLCBvcCwgdGEpO2plZGEoMC4yKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICclcyBbJXMqJXNdIGFrdW4gJXNDUCAlc3RlcnNpbXBhbiBkaSA+ICVzaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyUoUCxLLFAsSyxQLEssaGEsIG9wLCB0YSk7amVkYSgwLjIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyVzIFslcyElc10gc2V0aWFwIGNyYWNrIDFrIElELCBndW5ha2FuIG1vZGUgcGVzYXdhdCAyIGRldGlrXG4nJShQLE0sUCk7amVkYSgwLjIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzApIGFzIGxvZzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGFrdW4gaW4gc2VsZi5pZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRvID0gYWt1bi5zcGxpdCgnPD0+JylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuc3VibWl0KHNlbGYuYmFzaWMsIGluZG8sIHphZmlfKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKHNlbGYuYXBrKTtleGl0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgaW5kIGluICgnMycsICcwMycpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdcbiAlc1slcyolc10gYWt1biAlc09LJXMgdGVyc2ltcGFuIGRpID4lcyBoYXNpbC9PSy0lcy0lcy0lcy50eHQnJShQLEssUCxILFAsSCxoYSwgb3AsIHRhKTtqZWRhKDAuMikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnJXMgWyVzKiVzXSBha3VuICVzQ1AgJXN0ZXJzaW1wYW4gZGkgPiAlc2hhc2lsL0NQLSVzLSVzLSVzLnR4dCclKFAsSyxQLEssUCxLLGhhLCBvcCwgdGEpO2plZGEoMC4yKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICclcyBbJXMhJXNdIHNldGlhcCBjcmFjayAxayBJRCwgZ3VuYWthbiBtb2RlIHBlc2F3YXQgMiBkZXRpa1xuJyUoUCxNLFApO2plZGEoMC4yKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBsb2c6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBha3VuIGluIHNlbGYuaWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kbyA9IGFrdW4uc3BsaXQoJzw9PicpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLnN1Ym1pdChzZWxmLm1vYmlsLCBpbmRvLCB6YWZpXykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZShzZWxmLmFwayk7ZXhpdCgpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICgnXG4gJXNbIV0gaXNpIHlhbmcgYmVuYXIga2VudG9kJyUoTSkpO3pvbmEoKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4lcyBbIHBpbGloIG1ldGhvZGUgY3JhY2sgLSBzaWxhaGthbiBjb2JhIHNhdHXCsiBdXG4nJShQKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCAnIFslczAxJXNdIG1ldGhvZGUgYi1hcGkgKGNyYWNrIGNlcGF0KSclKEssUCkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyBbJXMwMiVzXSBtZXRob2RlIG1iYXNpYyAoY3JhY2sgbGFtYmF0KSclKEssUCkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJyBbJXMwMyVzXSBtZXRob2RlIG1vYmlsZSAoY3JhY2sgc2FuZ2F0IGxhbWJhdCkgJyUoSyxQKQ0KICAgICAgICAgICAgICAgICAgICB6b25hKHB3eC5zcGxpdCgnLCcpKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICBlbGlmIHVuaWtlcnMgaW4gKCdUJywgJ3QnKToNCiAgICAgICAgICAgIHByaW50ICdcbiVzIFsgcGlsaWggbWV0aG9kZSBjcmFjayAtIHNpbGFoa2FuIGNvYmEgc2F0dcKyIF1cbiclKFApDQogICAgICAgICAgICBwcmludCAnIFslczAxJXNdIG1ldGhvZGUgYi1hcGkgKGNyYWNrIGNlcGF0KSclKEssUCkNCiAgICAgICAgICAgIHByaW50ICcgWyVzMDIlc10gbWV0aG9kZSBtYmFzaWMgKGNyYWNrIGxhbWJhdCknJShLLFApDQogICAgICAgICAgICBwcmludCAnIFslczAzJXNdIG1ldGhvZGUgbW9iaWxlIChjcmFjayBzYW5nYXQgbGFtYmF0KSAnJShLLFApDQogICAgICAgICAgICBzZWxmLmxhbmdzdW5nKCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KCIlcyBbIV0gSXNpIHlhbmcgYmVuYXIga2VudG9kICIlKE0pKTtqZWRhKDIpO21lbnUoKQ0KICAgIGRlZiBsYW5nc3VuZyhzZWxmKToNCiAgICAgICAgc3V1dSA9IHJhd19pbnB1dCgnXG4gJXNbP10gbWV0aG9kZSA6JXMgJyUoUCxLKSkNCiAgICAgICAgaWYgc3V1dSA9PSAnJzoNCiAgICAgICAgICAgIHByaW50KCIlcyBbIV0gSXNpIHlhbmcgYmVuYXIga2VudG9kICIlKE0pKTtzZWxmLmxhbmdzdW5nKCkNCiAgICAgICAgZWxpZiBzdXV1IGluICgnMScsICcwMScpOg0KICAgICAgICAgICAgcHJpbnQgJ1xuICVzWyVzKiVzXSBha3VuICVzT0slcyB0ZXJzaW1wYW4gZGkgPiVzIGhhc2lsL09LLSVzLSVzLSVzLnR4dCclKFAsSyxQLEgsUCxILGhhLCBvcCwgdGEpO2plZGEoMC4yKQ0KICAgICAgICAgICAgcHJpbnQgJyVzIFslcyolc10gYWt1biAlc0NQICVzdGVyc2ltcGFuIGRpID4gJXNoYXNpbC9DUC0lcy0lcy0lcy50eHQnJShQLEssUCxLLFAsSyxoYSwgb3AsIHRhKTtqZWRhKDAuMikNCiAgICAgICAgICAgIHByaW50ICclcyBbJXMhJXNdIHNldGlhcCBjcmFjayAxayBJRCwgZ3VuYWthbiBtb2RlIHBlc2F3YXQgMiBkZXRpa1xuJyUoUCxNLFApO2plZGEoMC4yKQ0KICAgICAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzApIGFzIGxvZzoNCiAgICAgICAgICAgIAlmb3IgYWt1biBpbiBzZWxmLmlkOiANCiAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgdWlkLCBuYW1lID0gYWt1bi5zcGxpdCgnPD0+JykNCiAgICAgICAgICAgICAgICAgICAgICAgIF9pXyA9IG5hbWUuc3BsaXQoJyAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKF9pXykgPT0gMyBvciBsZW4oX2lfKSA9PSA0IG9yIGxlbihfaV8pID09IDUgb3IgbGVuKF9pXykgPT0gNjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZSwgX2lfWzBdKyIxMjMiLCBfaV9bMF0rIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gW25hbWUsIF9pX1swXSsiMTIzIiwgX2lfWzBdKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBsb2cuc3VibWl0KHNlbGYuYl9hcGksIHVpZCwgcHd4KQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgIG9zLnJlbW92ZShzZWxmLmFwayk7ZXhpdCgpDQogICAgICAgIGVsaWYgc3V1dSBpbiAoJzInLCAnMDInKToNCiAgICAgICAgICAgIHByaW50ICdcbiVzIFslcyolc10gYWt1biAlc09LJXMgdGVyc2ltcGFuIGRpID4lcyBoYXNpbC9PSy0lcy0lcy0lcy50eHQnJShQLEssUCxILFAsSCxoYSwgb3AsIHRhKTtqZWRhKDAuMikNCiAgICAgICAgICAgIHByaW50ICclcyBbJXMqJXNdIGFrdW4gJXNDUCAlc3RlcnNpbXBhbiBkaSA+ICVzaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyUoUCxLLFAsSyxQLEssaGEsIG9wLCB0YSk7amVkYSgwLjIpDQogICAgICAgICAgICBwcmludCAnJXMgWyVzISVzXSBzZXRpYXAgY3JhY2sgMWsgSUQsIGd1bmFrYW4gbW9kZSBwZXNhd2F0IDIgZGV0aWtcbiclKFAsTSxQKTtqZWRhKDAuMikNCiAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBsb2c6DQogICAgICAgICAgICAJZm9yIGFrdW4gaW4gc2VsZi5pZDogDQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IGFrdW4uc3BsaXQoJzw9PicpDQogICAgICAgICAgICAgICAgICAgICAgICBfaV8gPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihfaV8pID09IDMgb3IgbGVuKF9pXykgPT0gNCBvciBsZW4oX2lfKSA9PSA1IG9yIGxlbihfaV8pID09IDY6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gW25hbWUsIF9pX1swXSsiMTIzIiwgX2lfWzBdKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCBfaV9bMF0rIjEyMyIsIF9pX1swXSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9nLnN1Ym1pdChzZWxmLmJhc2ljLCB1aWQsIHB3eCkNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQogICAgICAgICAgICBvcy5yZW1vdmUoc2VsZi5hcGspO2V4aXQoKQ0KICAgICAgICBlbGlmIHN1dXUgaW4gKCczJywgJzAzJyk6DQogICAgICAgICAgICBwcmludCAnXG4gJXNbJXMqJXNdIGFrdW4gJXNPSyVzIHRlcnNpbXBhbiBkaSA+JXMgaGFzaWwvT0stJXMtJXMtJXMudHh0JyUoUCxLLFAsSCxQLEgsaGEsIG9wLCB0YSk7amVkYSgwLjIpDQogICAgICAgICAgICBwcmludCAnJXMgWyVzKiVzXSBha3VuICVzQ1AgJXN0ZXJzaW1wYW4gZGkgPiAlc2hhc2lsL0NQLSVzLSVzLSVzLnR4dCclKFAsSyxQLEssUCxLLGhhLCBvcCwgdGEpO2plZGEoMC4yKQ0KICAgICAgICAgICAgcHJpbnQgJyVzIFslcyElc10gc2V0aWFwIGNyYWNrIDFrIElELCBndW5ha2FuIG1vZGUgcGVzYXdhdCAyIGRldGlrXG4nJShQLE0sUCk7amVkYSgwLjIpDQogICAgICAgICAgICB3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgbG9nOg0KICAgICAgICAgICAgCWZvciBha3VuIGluIHNlbGYuaWQ6IA0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSBha3VuLnNwbGl0KCc8PT4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgX2lfID0gbmFtZS5zcGxpdCgnICcpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oX2lfKSA9PSAzIG9yIGxlbihfaV8pID09IDQgb3IgbGVuKF9pXykgPT0gNSBvciBsZW4oX2lfKSA9PSA2Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCBfaV9bMF0rIjEyMyIsIF9pX1swXSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZSwgX2lfWzBdKyIxMjMiLCBfaV9bMF0rIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5zdWJtaXQoc2VsZi5tb2JpbCwgdWlkLCBwd3gpDQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgb3MucmVtb3ZlKHNlbGYuYXBrKTtleGl0KCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KCJcbiVzIFshXSBJc2kgeWFuZyBiZW5hciBrZW50b2QgIiUoTSkpO3NlbGYubGFuZ3N1bmcoKQ0KICAgIGRlZiBiX2FwaShzZWxmLCB1c2VyLCB6b25hKToNCiAgICAJdHJ5Og0KICAgIAkgICAgdWEgPSBvcGVuKCdkYXRhL3VhLnR4dCcsICdyJykucmVhZCgpDQogICAgICAgIGV4Y2VwdCBJT0Vycm9yOg0KICAgICAgICAJdWEgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBNaSA5VCBQcm8gQnVpbGQvUUtRMS4xOTA4MjUuMDAyOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzg4LjAuNDMyNC4xODEgTW9iaWxlIFNhZmFyaS81MzcuMzZbRkJBTi9FTUE7RkJMQy9pdF9JVDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQogICAgICAgIGdsb2JhbCBvayxjcCxsb29wDQogICAgICAgIGZvciBwdyBpbiB6b25hOg0KICAgICAgICAgICAgcHcgPSBwdy5sb3dlcigpDQogICAgICAgICAgICBzZXMgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgICAgIGhlYWRlciA9IHsidXNlci1hZ2VudCI6IHVhLA0KICAgICAgICAgICAgIngtZmItY29ubmVjdGlvbi1iYW5kd2lkdGgiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsNDAwMDApKSwNCiAgICAgICAgICAgICJ4LWZiLXNpbS1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsNDAwMDApKSwNCiAgICAgICAgICAgICJ4LWZiLW5ldC1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsNDAwMDApKSwNCiAgICAgICAgICAgICJ4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSI6ICJFWENFTExFTlQiLA0KICAgICAgICAgICAgIngtZmItY29ubmVjdGlvbi10eXBlIjogImNlbGwuQ1RSYWRpb0FjY2Vzc1RlY2hub2xvZ3lIU0RQQSIsDQogICAgICAgICAgICAiY29udGVudC10eXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsDQogICAgICAgICAgICAieC1mYi1odHRwLWVuZ2luZSI6ICJMaWdlciJ9DQogICAgICAgICAgICBiYXBpID0gImh0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luIg0KICAgICAgICAgICAgcmVzcG9uc2UgPSBzZXMuZ2V0KGJhcGkrJz9mb3JtYXQ9anNvbiZlbWFpbD0nK3VzZXIrJyZwYXNzd29yZD0nK3B3KycmY3JlZGVudGlhbHNfdHlwZT1kZXZpY2VfYmFzZWRfbG9naW5fcGFzc3dvcmQmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmZXJyb3JfZGV0YWlsX3R5cGU9YnV0dG9uX3dpdGhfZGlzYWJsZWQmc291cmNlPWRldmljZV9iYXNlZF9sb2dpbiZtZXRhX2luZl9mYm1ldGE9JTIwJmN1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkPTAmbWV0aG9kPUdFVCZsb2NhbGU9ZW5fVVMmY2xpZW50X2NvdW50cnlfY29kZT1VUyZmYl9hcGlfY2FsbGVyX2NsYXNzPWNvbS5mYWNlYm9vay5mb3MuaGVhZGVyc3YyLmZiNGFvcmNhLkhlYWRlcnNWMkNvbmZpZ0ZldGNoUmVxdWVzdEhhbmRsZXImYWNjZXNzX3Rva2VuPTM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiZmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWU9YXV0aGVudGljYXRlJmNwbD10cnVlJywgaGVhZGVycz1oZWFkZXIpDQogICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSAhPSAyMDA6DQogICAgICAgICAgICAJbG9vcCArPTENCiAgICAgICAgICAgIAlwcmludCAoIlxyXDAzM1swOzkxbSBbIV0gSVAgdGVyYmxva2lyLiBoaWR1cGthbiBtb2RlIHBlc2F3YXQgMiBkZXRpayIpLA0KICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgICAgIGJfYXBpKHNlbGYsIHVzZXIsIHpvbmEpDQogICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHJlc3BvbnNlLnRleHQgYW5kICdFQUFBJyBpbiByZXNwb25zZS50ZXh0Og0KICAgICAgICAgICAgICAgIHByaW50ICdcciAlcyotLT4gJXMg4peKICVzIOKXiiAlcyAnICUgKEgsdXNlcixwdyxyZXNwb25zZS5qc29uKClbJ2FjY2Vzc190b2tlbiddKQ0KICAgICAgICAgICAgICAgIG9rLmFwcGVuZCgnJXMg4peKICVzIOKXiiAlcycgJSAodXNlcixwdyxyZXNwb25zZS5qc29uKClbJ2FjY2Vzc190b2tlbiddKSkNCiAgICAgICAgICAgICAgICBvcGVuKCdoYXNpbC9DUC0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCcgKi0tPiAlcyDil4ogJXMg4peKICVzXG4nJSh1c2VyLHB3LHJlc3BvbnNlLmpzb24oKVsnYWNjZXNzX3Rva2VuJ10pKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHJlc3BvbnNlLmpzb24oKVsnZXJyb3JfbXNnJ106DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICByb216ID0gb3BlbigndG9rZW4udHh0JykucmVhZCgpDQogICAgICAgICAgICAgICAgICAgIGxhaGlyID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcz9hY2Nlc3NfdG9rZW49JXMnJSh1c2VyLHJvbXopKS5qc29uKClbJ2JpcnRoZGF5J10NCiAgICAgICAgICAgICAgICAgICAgbW9udGgsIGRheSwgeWVhciA9IGxhaGlyLnNwbGl0KCcvJykNCiAgICAgICAgICAgICAgICAgICAgbW9udGggPSBidWxhbjFbbW9udGhdDQogICAgICAgICAgICAgICAgICAgIHByaW50ICdcciAlcyotLT4gJXMg4peKICVzIOKXiiAlcyAlcyAlcyAgJyAlIChLLHVzZXIscHcsZGF5LG1vbnRoLHllYXIpDQogICAgICAgICAgICAgICAgICAgIGNwLmFwcGVuZCgiJXMg4peKICVzIOKXiiAlcyAlcyAlcyIlICh1c2VyLHB3LGRheSxtb250aCx5ZWFyKSkNCiAgICAgICAgICAgICAgICAgICAgb3BlbignaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgiICotLT4gJXMg4peKICVzIOKXiiAlcyAlcyAlc1xuIiUodXNlcixwdyxkYXksbW9udGgseWVhcikpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgICAgICAgICBkYXkgPSAnJw0KICAgICAgICAgICAgICAgICAgICBtb250aCAgID0gJycNCiAgICAgICAgICAgICAgICAgICAgeWVhciAgPSAnJw0KICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgICAgIHByaW50ICdcciAlcyotLT4gJXMg4peKICVzICAgICAgICAgICAnICUgKEssdXNlcixwdykNCiAgICAgICAgICAgICAgICBjcC5hcHBlbmQoJyVzIOKXiiAlcycgJSAodXNlcixwdykpDQogICAgICAgICAgICAgICAgb3BlbignaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgiICotLT4gJXMg4peKICVzXG4iJSh1c2VyLHB3KSkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGxvb3AgKz0gMQ0KICAgICAgICBybSA9IHJhbmRvbS5jaG9pY2UoWydceDFiWzE7OTFtJywgJ1x4MWJbMTs5Mm0nLCAnXHgxYlsxOzkzbScsICdceDFiWzE7OTRtJywgJ1x4MWJbMTs5NW0nLCAnXHgxYlsxOzk2bScsICdceDFiWzE7OTdtJ10pDQogICAgICAgIHByaW50KCdcciAlcyotLT4gJXMvJXMgW09LLTolc10tW0NQLTolc10nJShybSxsb29wLGxlbihzZWxmLmlkKSxsZW4ob2spLGxlbihjcCkpKSwNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgZGVmIGJhc2ljKHNlbGYsIHVzZXIsIHpvbmEpOg0KICAgICAgICB0cnk6DQogICAgCSAgICB1YSA9IG9wZW4oJ2RhdGEvdWEudHh0JywgJ3InKS5yZWFkKCkNCiAgICAgICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIAl1YSA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNltGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCiAgICAgICAgZ2xvYmFsIG9rLGNwLGxvb3ANCiAgICAgICAgZm9yIHB3IGluIHpvbmE6DQogICAgICAgICAgICBwdyA9IHB3Lmxvd2VyKCkNCiAgICAgICAgICAgIHNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgc2VzLmhlYWRlcnMudXBkYXRlKHsiSG9zdCI6Im1iYXNpYy5mYWNlYm9vay5jb20iLCJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLCJ1c2VyLWFnZW50Ijp1YSwiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCIsImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUiLCJhY2NlcHQtbGFuZ3VhZ2UiOiJpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyJ9KQ0KICAgICAgICAgICAgcCA9IHNlcy5nZXQoImh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbSIpDQogICAgICAgICAgICBiID0gYnM0LkJlYXV0aWZ1bFNvdXAocC50ZXh0LCAnaHRtbC5wYXJzZXInKQ0KICAgICAgICAgICAgZHRnID0gKCcnKS5qb2luKGJzNC5yZS5maW5kYWxsKCdkdHNnIjpcXHsidG9rZW4iOiIoLio/KSInLCBwLnRleHQpKQ0KICAgICAgICAgICAgZGF0YSA9IHt9DQogICAgICAgICAgICBmb3Igcm9tIGluIGIoJ2lucHV0Jyk6DQogICAgICAgICAgICAJaWYgcm9tLmdldCgndmFsdWUnKSBpcyBOb25lOg0KICAgICAgICAgICAgCSAgICBpZiByb20uZ2V0KCduYW1lJykgPT0gJ2VtYWlsJzoNCiAgICAgICAgICAgIAkgICAgICAgIGRhdGEudXBkYXRlKHsiZW1haWwiOnVzZXJ9KQ0KICAgICAgICAgICAgICAgICAgICBlbGlmIHJvbS5nZXQoIm5hbWUiKT09InBhc3MiOg0KICAgICAgICAgICAgICAgICAgICAJZGF0YS51cGRhdGUoeyJwYXNzIjpwd30pDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIAlkYXRhLnVwZGF0ZSh7cm9tLmdldCgnbmFtZScpOiAnJ30pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAJZGF0YS51cGRhdGUoe3JvbS5nZXQoJ25hbWUnKTogcm9tLmdldCgndmFsdWUnKX0pDQogICAgICAgICAgICBkYXRhLnVwZGF0ZSh7J2ZiX2R0c2cnOiBkdGcsICdtX3Nlc3MnOiAnJywgJ19fdXNlcic6ICcwJywgJ19fcmVxJzogJ2QnLA0KICAgICAgICAgICAgJ19fY3NyJzogJycsICdfX2EnOiAnJywgJ19fZHluJzogJycsICdlbmNwYXNzJzogJyd9KQ0KICAgICAgICAgICAgc2VzLmhlYWRlcnMudXBkYXRlKHsncmVmZXJlcic6ICdodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vbG9naW4vP25leHQmcmVmPWRibCZmbCZyZWZpZD04J30pDQogICAgICAgICAgICBwbyA9IHNlcy5wb3N0KCdodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vbG9naW4vZGV2aWNlLWJhc2VkL2xvZ2luL2FzeW5jLz9yZWZzcmM9aHR0cHMlM0ElMkYlMkZtYmFzaWMuZmFjZWJvb2suY29tJTJGbG9naW4lMkYlM0ZyZWYlM0RkYmwmbHd2PTEwMCcsIGRhdGE9ZGF0YSkudGV4dA0KICAgICAgICAgICAgaWYgImNfdXNlciIgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCk6DQogICAgICAgICAgICAJa3VraSA9ICgiOyIpLmpvaW4oWyAiJXM9JXMiICUgKGtleSwgdmFsdWUpIGZvciBrZXksIHZhbHVlIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgIHByaW50ICdcciAlcyotLT4gJXMg4peKICVzIOKXiiAlcyAgJyAlIChILHVzZXIscHcsa3VraSkNCiAgICAgICAgICAgICAgICBvay5hcHBlbmQoIiVzIOKXiiAlcyDil4ogJXMiJSAodXNlcixwdyxrdWtpKSkNCiAgICAgICAgICAgICAgICBvcGVuKCdoYXNpbC9DUC0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCIgKi0tPiAlcyDil4ogJXMg4peKICVzXG4iJSh1c2VyLHB3LGt1a2kpKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIGVsaWYgImNoZWNrcG9pbnQiIGluIHNlcy5jb29raWVzLmdldF9kaWN0KCkua2V5cygpOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgcm9teiA9IG9wZW4oJ3Rva2VuLnR4dCcpLnJlYWQoKQ0KICAgICAgICAgICAgICAgICAgICBsYWhpciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXM/YWNjZXNzX3Rva2VuPSVzJyUodXNlcixyb216KSkuanNvbigpWydiaXJ0aGRheSddDQogICAgICAgICAgICAgICAgICAgIG1vbnRoLCBkYXksIHllYXIgPSBsYWhpci5zcGxpdCgnLycpDQogICAgICAgICAgICAgICAgICAgIG1vbnRoID0gYnVsYW4xW21vbnRoXQ0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXHIgJXMqLS0+ICVzIOKXiiAlcyDil4ogJXMgJXMgJXMgJyAlIChLLHVzZXIscHcsZGF5LG1vbnRoLHllYXIpDQogICAgICAgICAgICAgICAgICAgIGNwLmFwcGVuZCgiJXMg4peKICVzIOKXiiAlcyAlcyAlcyIlICh1c2VyLHB3LGRheSxtb250aCx5ZWFyKSkNCiAgICAgICAgICAgICAgICAgICAgb3BlbignaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgiICotLT4gJXMg4peKICVzIOKXiiAlcyAlcyAlc1xuIiUodXNlcixwdyxkYXksbW9udGgseWVhcikpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgICAgICAgICBkYXkgPSAnJw0KICAgICAgICAgICAgICAgICAgICBtb250aCAgID0gJycNCiAgICAgICAgICAgICAgICAgICAgeWVhciAgPSAnJw0KICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgICAgIHByaW50ICdcciAlcyotLT4gJXMg4peKICVzICAgICAgICAgICAgJyAlIChLLHVzZXIscHcpDQogICAgICAgICAgICAgICAgY3AuYXBwZW5kKCIlcyDil4ogJXMiJSAodXNlcixwdykpDQogICAgICAgICAgICAgICAgb3BlbignaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgiICotLT4gJXMg4peKICVzXG4iJSh1c2VyLHB3KSkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGxvb3AgKz0gMQ0KICAgICAgICBybSA9IHJhbmRvbS5jaG9pY2UoWydceDFiWzE7OTFtJywgJ1x4MWJbMTs5Mm0nLCAnXHgxYlsxOzkzbScsICdceDFiWzE7OTRtJywgJ1x4MWJbMTs5NW0nLCAnXHgxYlsxOzk2bScsICdceDFiWzE7OTdtJ10pDQogICAgICAgIHByaW50KCdcciAlcyotLT4gJXMvJXMgW09LLTolc10tW0NQLTolc10nJShybSxsb29wLGxlbihzZWxmLmlkKSxsZW4ob2spLGxlbihjcCkpKSwNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgZGVmIG1vYmlsKHNlbGYsIHVzZXIsIHpvbmEpOg0KICAgICAgICB0cnk6DQogICAgCSAgICB1YSA9IG9wZW4oJ2RhdGEvdWEudHh0JywgJ3InKS5yZWFkKCkNCiAgICAgICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIAl1YSA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNltGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCiAgICAgICAgZ2xvYmFsIG9rLGNwLGxvb3ANCiAgICAgICAgZm9yIHB3IGluIHpvbmE6DQogICAgICAgICAgICBwdyA9IHB3Lmxvd2VyKCkNCiAgICAgICAgICAgIHNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgc2VzLmhlYWRlcnMudXBkYXRlKHsiSG9zdCI6Im0uZmFjZWJvb2suY29tIiwiY2FjaGUtY29udHJvbCI6Im1heC1hZ2U9MCIsInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwidXNlci1hZ2VudCI6dWEsImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgiLCJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIiwiYWNjZXB0LWxhbmd1YWdlIjoiaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcifSkNCiAgICAgICAgICAgIHAgPSBzZXMuZ2V0KCJodHRwczovL20uZmFjZWJvb2suY29tIikNCiAgICAgICAgICAgIGIgPSBiczQuQmVhdXRpZnVsU291cChwLnRleHQsICdodG1sLnBhcnNlcicpDQogICAgICAgICAgICBkdGcgPSAoJycpLmpvaW4oYnM0LnJlLmZpbmRhbGwoJ2R0c2ciOlxceyJ0b2tlbiI6IiguKj8pIicsIHAudGV4dCkpDQogICAgICAgICAgICBkYXRhID0ge30NCiAgICAgICAgICAgIGZvciByb20gaW4gYignaW5wdXQnKToNCiAgICAgICAgICAgIAlpZiByb20uZ2V0KCd2YWx1ZScpIGlzIE5vbmU6DQogICAgICAgICAgICAJICAgIGlmIHJvbS5nZXQoJ25hbWUnKSA9PSAnZW1haWwnOg0KICAgICAgICAgICAgCSAgICAgICAgZGF0YS51cGRhdGUoeyJlbWFpbCI6dXNlcn0pDQogICAgICAgICAgICAgICAgICAgIGVsaWYgcm9tLmdldCgibmFtZSIpPT0icGFzcyI6DQogICAgICAgICAgICAgICAgICAgIAlkYXRhLnVwZGF0ZSh7InBhc3MiOnB3fSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgCWRhdGEudXBkYXRlKHtyb20uZ2V0KCduYW1lJyk6ICcnfSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIAlkYXRhLnVwZGF0ZSh7cm9tLmdldCgnbmFtZScpOiByb20uZ2V0KCd2YWx1ZScpfSkNCiAgICAgICAgICAgIGRhdGEudXBkYXRlKHsnZmJfZHRzZyc6IGR0ZywgJ21fc2Vzcyc6ICcnLCAnX191c2VyJzogJzAnLCAnX19yZXEnOiAnZCcsDQogICAgICAgICAgICAnX19jc3InOiAnJywgJ19fYSc6ICcnLCAnX19keW4nOiAnJywgJ2VuY3Bhc3MnOiAnJ30pDQogICAgICAgICAgICBzZXMuaGVhZGVycy51cGRhdGUoeydyZWZlcmVyJzogJ2h0dHBzOi8vbS5mYWNlYm9vay5jb20vbG9naW4vP25leHQmcmVmPWRibCZmbCZyZWZpZD04J30pDQogICAgICAgICAgICBwbyA9IHNlcy5wb3N0KCdodHRwczovL20uZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC9sb2dpbi9hc3luYy8/cmVmc3JjPWh0dHBzJTNBJTJGJTJGbS5mYWNlYm9vay5jb20lMkZsb2dpbiUyRiUzRnJlZiUzRGRibCZsd3Y9MTAwJywgZGF0YT1kYXRhKS50ZXh0DQogICAgICAgICAgICBpZiAiY191c2VyIiBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpLmtleXMoKToNCiAgICAgICAgICAgIAlrdWtpID0gKCI7Iikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpIF0pDQogICAgICAgICAgICAgICAgcHJpbnQgJ1xyICVzKi0tPiAlcyDil4ogJXMg4peKICVzICcgJSAoSCx1c2VyLHB3LGt1a2kpDQogICAgICAgICAgICAgICAgb2suYXBwZW5kKCIlcyDil4ogJXMg4peKICVzIiUgKHVzZXIscHcsa3VraSkpDQogICAgICAgICAgICAgICAgb3BlbignaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgiICotLT4gJXMg4peKICVzIOKXiiAlc1xuIiUodXNlcixwdyxrdWtpKSkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmICJjaGVja3BvaW50IiBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpLmtleXMoKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIHJvbXogPSBvcGVuKCd0b2tlbi50eHQnKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgbGFoaXIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzP2FjY2Vzc190b2tlbj0lcyclKHVzZXIscm9teikpLmpzb24oKVsnYmlydGhkYXknXQ0KICAgICAgICAgICAgICAgICAgICBtb250aCwgZGF5LCB5ZWFyID0gbGFoaXIuc3BsaXQoJy8nKQ0KICAgICAgICAgICAgICAgICAgICBtb250aCA9IGJ1bGFuMVttb250aF0NCiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xyICVzKi0tPiAlcyDil4ogJXMg4peKICVzICVzICVzICcgJSAoSyx1c2VyLHB3LGRheSxtb250aCx5ZWFyKQ0KICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQoIiVzIOKXiiAlcyDil4ogJXMgJXMgJXMiJSAodXNlcixwdyxkYXksbW9udGgseWVhcikpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJ2hhc2lsL0NQLSVzLSVzLSVzLnR4dCcgJSAoaGEsIG9wLCB0YSksICdhJykud3JpdGUoIiAqLS0+ICVzIOKXiiAlcyDil4ogJXMgJXMgJXNcbiIlKHVzZXIscHcsZGF5LG1vbnRoLHllYXIpKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgZGF5ID0gJycNCiAgICAgICAgICAgICAgICAgICAgbW9udGggICA9ICcnDQogICAgICAgICAgICAgICAgICAgIHllYXIgID0gJycNCiAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgICAgICBwcmludCAnXHIgJXMqLS0+ICVzIOKXiiAlcyAgICAgICAgICAgICAgJyAlIChLLHVzZXIscHcpDQogICAgICAgICAgICAgICAgY3AuYXBwZW5kKCIlcyDil4ogJXMiJSAodXNlcixwdykpDQogICAgICAgICAgICAgICAgb3BlbignaGFzaWwvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgiICotLT4gJXMg4peKICVzXG4iJSh1c2VyLHB3KSkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGxvb3AgKz0gMQ0KICAgICAgICBybSA9IHJhbmRvbS5jaG9pY2UoWydceDFiWzE7OTFtJywgJ1x4MWJbMTs5Mm0nLCAnXHgxYlsxOzkzbScsICdceDFiWzE7OTRtJywgJ1x4MWJbMTs5NW0nLCAnXHgxYlsxOzk2bScsICdceDFiWzE7OTdtJ10pDQogICAgICAgIHByaW50KCdcciAlcyotLT4gJXMvJXMgW09LLTolc10tW0NQLTolc10nJShybSxsb29wLGxlbihzZWxmLmlkKSxsZW4ob2spLGxlbihjcCkpKSwNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQpkZWYgY3JhY2syKHVzZXIsIHB3eCk6DQoJZ2xvYmFsIGxvb3BpbmcsIGxvcGluZw0KCWNfYmZmXyA9IGxlbihwd3gpDQoJZm9yIHBhcyBpbiBwd3g6DQoJCWlmIGxvb3BpbmcgIT0gMToNCgkJCXBhc3MNCgkJZWxzZToNCgkJCWlmIGxlbihzdGF0dXNfZm9sbCkgIT0gMToNCgkJCQlybSA9IHJhbmRvbS5jaG9pY2UoWyJcMDMzWzE7OTFtIiwiXDAzM1sxOzkybSIsIlwwMzNbMTs5M20iLCJcMDMzWzE7OTRtIiwiXDAzM1sxOzk1bSIsIlwwMzNbMTs5Nm0iLCJcMDMzWzE7OTdtIl0pDQoJCQkJcHJpbnQgIlxyICIrcm0rIiotLT4gJXMvJXMgW09LOiVzXS1bQ1A6JXNdICIlKHN0cihsb3BpbmcpLGxlbihtaSksbGVuKG9rKSxsZW4oY3ApKSwNCgkJCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJCQljX2JmZl8gLT0gMQ0KCQkJZWxzZToNCgkJCQlwYXNzDQoJCXRyeToNCgkJCWlmIHVzZXIgaW4gb2sgb3IgdXNlciBpbiBjcDoNCgkJCQlicmVhaw0KCQkJcHcgPSBwYXMubG93ZXIoKQ0KCQkJdHJ5Og0KCQkJCWhlYWRlcnogPSB7IlVzZXItQWdlbnQiOiB1c2VyX2FnZW50el9hcGl9DQoJCQkJd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2VzOg0KCQkJCQl1cmxsID0gImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vIg0KCQkJCQlkYXRhID0gc2VzLmdldCh1cmxsLCBoZWFkZXJzPWhlYWRlcnopLmNvbnRlbnQNCgkJCQkJdG9rZXR0ID0gcmUuZmluZGFsbCgneyJjb25maWciOnsiY3NyZl90b2tlbiI6IiguKikiLCJ2aWV3ZXIiJywgc3RyKGRhdGEpKVswXQ0KCQkJCWhlYWRlciA9IHsiQWNjZXB0IjogIiovKiIsIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlLCBiciIsIkFjY2VwdC1MYW5ndWFnZSI6ICJlbi1VUyxlbjtxPTAuNSIsIkhvc3QiOiAid3d3Lmluc3RhZ3JhbS5jb20iLCJYLUNTUkZUb2tlbiI6IHRva2V0dCwiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsIlJlZmVyZXIiOiAiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9hY2NvdW50cy9sb2dpbi8iLCJVc2VyLUFnZW50IjogdXNlcl9hZ2VudHosDQoJCQkJCQkgfQ0KCQkJCXBhcmFtID0geyJ1c2VybmFtZSI6IHVzZXIsImVuY19wYXNzd29yZCI6ICIjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e306e30iLmZvcm1hdChyYW5kb20ucmFuZGludCgxMDAwMDAwMDAwLCA5OTk5OTk5OTk5OSksIHB3KSwib3B0SW50b09uZVRhcCI6IEZhbHNlLCJxdWVyeVBhcmFtcyI6IHt9LCJzdG9wRGVsZXRpb25Ob25jZSI6ICIiLCJ0cnVzdGVkRGV2aWNlUmVjb3JkcyI6IHt9DQoJCQkJCQl9DQoJCQlleGNlcHQ6DQoJCQkJaGVhZGVyID0ge30NCgkJCQlwYXJhbSA9IHt9DQoJCQkJcGFzcw0KCQkJd2l0aCByZXF1ZXN0cy5TZXNzaW9uKCkgYXMgc2VzOg0KCQkJCXVybCA9ICJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luL2FqYXgvIg0KCQkJCXJlc3BvbiA9IHNlcy5wb3N0KHVybCwgZGF0YT1wYXJhbSwgaGVhZGVycz1oZWFkZXIpDQoJCQkJZGF0YSA9IGpzb24ubG9hZHMocmVzcG9uLmNvbnRlbnQpO2plZGEoMDAuMSkNCgkJCQkjIHByaW50ICgiXHIiLGRhdGEpDQoJCQkJIyBwcmludCAoIlxyICotLT4gJXMsJXMsfCwlcywlcyAgICAgICAgICAgICIlKFAsdXNlcixILHB3KSkNCgkJCQlpZiAiY2hlY2twb2ludF91cmwiIGluIHN0cihkYXRhKToNCgkJCQkJY2VwZWggPSAiQ2hlY2twb2ludCINCgkJCQkJaW5nZm8odXNlciwgcHcsIGNlcGVoKQ0KCQkJCQl3aXRoIG9wZW4oImNlcGVoLnR4dCIsICJhIikgYXMgc2ltcGFuOg0KCQkJCQkJc2ltcGFuLndyaXRlKCIgW0NoZWNrcG9pbnRdICIrdXNlcisiIOKXiiAiK3B3KyJcbiIpDQoJCQkJCWNwLmFwcGVuZCh1c2VyKQ0KCQkJCQlicmVhaw0KCQkJCWVsaWYgInVzZXJJZCIgaW4gc3RyKGRhdGEpOg0KCQkJCQlva2VoID0gIkJlcmhhc2lsIg0KCQkJCQlpZiBsZW4oc3RhdHVzX2ZvbGwpICE9IDE6DQoJCQkJCQlpbmdmbyh1c2VyLCBwdywgb2tlaCkNCgkJCQkJCXdpdGggb3Blbigib2tlaC50eHQiLCAiYSIpYXMgc2ltcGFuOg0KCQkJCQkJCXNpbXBhbi53cml0ZSgiIFtCZXJoYXNpbF0gIit1c2VyKyIg4peKICIrcHcrIlxuIikNCgkJCQkJCW9rLmFwcGVuZCh1c2VyKQ0KCQkJCQkJI2ZvbGxvdyhzZXMsdXNlcikNCgkJCQkJYnJlYWsNCgkJCQllbGlmICJQbGVhc2Ugd2FpdCIgaW4gc3RyKGRhdGEpOg0KCQkJCQlwcmludCAoIlxyJXNbIV0gTW9kZSBwZXNhd2F0a2FuIDIgZGV0aWsgICIlKE0pKSwNCgkJCQkJbG9vcGluZys9MQ0KCQkJCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJCQkJcHd4ID0gW3B3XQ0KCQkJCQljcmFjazIodXNlciwgcHd4KQ0KCQkJCQlsb3BpbmcgLT0gMQ0KCQkJCWVsc2U6DQoJCQkJCWxvb3BpbmcgPSAxDQoJCQkJCXBhc3MNCgkJZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KCQkJcHJpbnQgKCJcciVzWyFdIFRpZGFrIGFkYSBrb25la3NpIEludGVybmV0ICIlKE0pKSwNCgkJCXN5cy5zdGRvdXQuZmx1c2goKQ0KCQkJbG9vcGluZys9MQ0KCQkJcHd4ID0gW3B3XQ0KCQkJY3JhY2syKHVzZXIsIHB3eCkNCgkJCWxvcGluZyAtPSAxDQoJCWV4Y2VwdDoNCgkJCWxvb3BpbmcgPSAxDQoJCQlwYXNzDQoJbG9waW5nKz0xDQpOb25lDQojIEdBTlRJIFVTRVIgQUdFTlQNCmRlZiB1c2VyYWdlbnQoKToNCglwcmludCAoIlxuJXMgWyVzMDElc10gR2FudGkgdXNlciBhZ2VudCAiJShQLEssUCkpDQoJcHJpbnQgKCIgWyVzMDIlc10gQ2VrIHVzZXIgYWdlbnQgIiUoSyxQKSkNCglwcmludCAoIiBbJXMwMCVzXSBLZW1iYWxpICIlKE0sUCkpDQoJdWFzKCkNCmRlZiB1YXMoKToNCiAgICB1ID0gcmF3X2lucHV0KCdcbiVzIFs/XSBwaWxpaCA6JXMgJyUoUCxLKSkNCiAgICBpZiB1ID09ICcnOg0KICAgICAgICBwcmludCgiJXMgWyFdIElzaSB5YW5nIGJlbmFyIGtlbnRvZCAiJShNKSk7amVkYSgyKTt1YXMoKQ0KICAgIGVsaWYgdSBpbigiMSIsIjAxIik6DQogICAgCXByaW50ICgiICVzWyVzKiVzXSBrZXRpayAlc015IHVzZXIgYWdlbnQlcyBkaSBicm93c2VyIGdvb2dsZSBjaHJvbWVcbiBbJXMqJXNdIHVudHVrIGd1bmFrYW4gdXNlciBhZ2VudCBhbmRhIHNlbmRpcmkiJShQLEssUCxILFAsSyxQKSkNCiAgICAJcHJpbnQgKCIgWyVzKiVzXSBrZXRpayAlc2RlZmF1bHQlcyB1bnR1ayBndW5ha2FuIHVzZXIgYWdlbnQgYmF3YWFuIHRvb2xzIiUoSyxQLEgsUCkpDQogICAgCXRyeToNCiAgICAJICAgIHVhID0gcmF3X2lucHV0KCIlcyBbP10gdXNlciBhZ2VudCA6ICVzIiUoUCxLKSkNCiAgICAgICAgICAgIGlmIHVhIGluKCIiKToNCiAgICAgICAgICAgIAlwcmludCgiJXMgWyFdIElzaSB5YW5nIGJlbmFyIGtlbnRvZCAiJShNKSk7amVkYSgyKTttZW51KCkNCiAgICAgICAgICAgIGVsaWYgdWEgaW4oIm15IHVzZXIgYWdlbnQiLCJNeSBVc2VyIEFnZW50IiwiTVkgVVNFUiBBR0VOVCIsIk15IHVzZXIgYWdlbnQiKToNCiAgICAgICAgICAgIAlqYWxhbigiJXMgWyFdICBBbmRhIGFrYW4gZGkgYXJhaGthbiBrZSBicm93c2VyICIlKEgpKTtqZWRhKDIpDQogICAgICAgICAgICAJb3Muc3lzdGVtKCJhbSBzdGFydCBodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPU15K3VzZXIrYWdlbnQ+L2Rldi9udWxsIik7amVkYSgyKTt1c2VyYWdlbnQoKQ0KICAgICAgICAgICAgZWxpZiB1YSBpbigiZGVmYXVsdCIsIkRlZmF1bHQiLCJERUZBVUxUIik6DQogICAgICAgICAgICAgICAgdWEgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBNaSA5VCBQcm8gQnVpbGQvUUtRMS4xOTA4MjUuMDAyOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzg4LjAuNDMyNC4xODEgTW9iaWxlIFNhZmFyaS81MzcuMzZbRkJBTi9FTUE7RkJMQy9pdF9JVDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQogICAgICAgICAgICAgICAgb3BlbigiZGF0YS91YS50eHQiLCJ3Iikud3JpdGUodWFfKQ0KICAgICAgICAgICAgICAgIHByaW50ICgiXG4lcyBb4oiaXSBtZW5nZ3VuYWthbiB1c2VyIGFnZW50IGJhd2FhbiIlKEgpKTtqZWRhKDIpO21lbnUoKQ0KICAgICAgICAgICAgb3BlbigiZGF0YS91YS50eHQiLCJ3Iikud3JpdGUodWEpO2plZGEoMikNCiAgICAgICAgICAgIHByaW50ICgiXG4lcyBb4oiaXSBiZXJoYXNpbCBtZW5nZ2FudGkgdXNlciBhZ2VudCIlKEgpKTtqZWRhKDIpO21lbnUoKQ0KICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQgYXMgZXI6DQoJCQlleGl0ICgiXHgxYlsxOzkxbSBbIV0gIitlcikgDQogICAgZWxpZiB1IGluKCIyIiwiMDIiKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAJdWFfID0gb3BlbignZGF0YS91YS50eHQnLCAncicpLnJlYWQoKTtqZWRhKDIpO3ByaW50ICgiJXMgWyVzKiVzXSB1c2VyIGFnZW50IGFuZGEgOiAlcyVzIiUoUCxLLFAsSCx1YV8pKTtqZWRhKDIpO3Jhd19pbnB1dCgiXG4lcyBbICVzZW50ZXIlcyBdICIlKFAsSyxQKSk7bWVudSgpDQogICAgICAgIGV4Y2VwdCBJT0Vycm9yOg0KICAgICAgICAJdWFfID0gJyVzLSclKE0pDQogICAgZWxpZiB1IGluKCIwIiwiMDAiKToNCiAgICAJbWVudSgpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoIiVzIFshXSBJc2kgeWFuZyBiZW5hciBrZW50b2QgIiUoTSkpO2plZGEoMik7dWFzKCkNCiMgTUVOVSBJTkkgQUpHDQpkZWYgbWVudSgpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIHRyeToNCiAgICAJcm9teiA9IG9wZW4oJ3Rva2VuLnR4dCcsICdyJykucmVhZCgpDQogICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIHByaW50ICgiJXMgWyFdIFRva2VuIGludmFsaWQgIiUoTSkpO2plZGEoMik7b3Muc3lzdGVtKCdybSAtcmYgdG9rZW4udHh0Jyk7bWFzdWsoKQ0KICAgIHRyeToNCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/YWNjZXNzX3Rva2VuPScrcm9teixoZWFkZXJzPWhlYWRlcikNCiAgICAgICAgYSA9IGpzb24ubG9hZHMoci50ZXh0KQ0KICAgICAgICBuYW1hID0gYVsibmFtZSJdDQogICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICBwcmludCgiJXMgWyFdIFRva2VuIGludmFsaWQgIiUoTSkpO2plZGEoMik7b3Muc3lzdGVtKCdybSAtcmYgZGF0YS90b2tlbi50eHQgJiYgcm0gLXJmIGRhdGEvY29va2llcycpO21hc3VrKCkNCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgIGV4aXQoIiVzIFshXSBLZXNhbGFoYW4ga29uZWtzaSAiJShNKSkNCiAgICBiYW5uZXIoKQ0KICAgIHByaW50ICgnXG4gJXNbIHdlbGNvbWUgJXMlcyVzIF0gXG4nJShQLEssbmFtYSxQKSkNCiAgICBwcmludCAoJyBbJXMwMSVzXSBEdW1wIGlkIHB1YmxpYyclKEssUCkpIA0KICAgIHByaW50ICgnIFslczAyJXNdIER1bXAgaWQgZm9sbG93ZXJzJyUoSyxQKSkgDQogICAgcHJpbnQgKCcgWyVzMDMlc10gRHVtcCBpZCByZWFjdGlvbiBwb3N0JyUoSyxQKSkNCiAgICBwcmludCAoJyBbJXMwNCVzXSBDcmFjayBjYXJpIG5hbWEgKGluc3RhZ3JhbSkgJyUoSyxQKSkNCiAgICBwcmludCAoJyBbJXMwNSVzXSAlc1N0YXJ0IGNyYWNrICVzJyUoSyxQLEgsUCkpIA0KICAgIHByaW50ICgnIFslczA2JXNdIFNldHRpbmcgdXNlciBhZ2VudCclKEssUCkpIA0KICAgIHByaW50ICgnIFslczA3JXNdIENlayBoYXNpbCBjcmFjayclKEssUCkpIA0KICAgICNwcmludCAoJyBbJXMwOCVzXSBHYWJ1bmcgZ3JvdXAnJShLLFApKQ0KICAgICNwcmludCAoJyBbJXMwOSVzXSBJbmZvIHNjcmlwdCclKEssUCkpDQogICAgcHJpbnQgKCcgWyVzMDAlc10gSGFwdXMgdG9rZW4gJyUoTSxQKSkNCiAgICB1bmlrID0gcmF3X2lucHV0KCdcbiVzIFs/XSBNZW51IDogJXMnJShQLEspKQ0KICAgIGlmIHVuaWsgPT0gJyc6DQogICAgICAgIHByaW50KCIlcyBbIV0gSXNpIHlhbmcgYmVuYXIga2VudG9kICIlKE0pKTtqZWRhKDIpO21lbnUoKQ0KICAgIGVsaWYgdW5payBpblsnMScsJzAxJ106DQogICAgICAgIHB1Ymxpayhyb216KQ0KICAgIGVsaWYgdW5payBpblsnMicsJzAyJ106DQogICAgICAgIGZvbGxvd2Vycyhyb216KQ0KICAgIGVsaWYgdW5payBpblsnMycsJzAzJ106DQogICAgICAgIHBvc3Rpbmdhbihyb216KQ0KICAgIGVsaWYgdW5payBpblsnNCcsJzA0J106DQogICAgCWlnZygpDQogICAgZWxpZiB1bmlrIGluWyc1JywnMDUnXToNCiAgICAgICAgbmdlbnRvZCgpLnJvbWl5KCkNCiAgICBlbGlmIHVuaWsgaW5bJzYnLCcwNiddOg0KICAgIAl1c2VyYWdlbnQoKQ0KICAgIGVsaWYgdW5payBpblsnNycsJzA3J106DQogICAgCXByaW50ICJcbiVzIFswMV0gSGFzaWwgY3JhY2sgYWt1biBmYWNlYm9vayAiJShQKQ0KICAgICAgICBwcmludCAiJXMgWzAyXSBIYXNpbCBjcmFjayBha3VuIGluc3RhZ3JhbSAiJShQKQ0KICAgICAgICBjID0gcmF3X2lucHV0KCdcbiVzIFs/XSBNZW51IDogJXMnJShQLEspKQ0KICAgIAloYXNpbGwoYykNCiAgICBlbGlmIHVuaWsgaW5bJzgnLCcwOCddOg0KICAgICAgICBvcy5zeXN0ZW0oInhkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9ncm91cHMvOTI0Njc5NTk1MTQ5MzYwIikNCiAgICBlbGlmIHVuaWsgaW5bJzknLCcwOSddOg0KICAgICAgICBwcmludChpbmdmbykNCiAgICBlbGlmIHVuaWsgaW5bJzAnLCcwMCddOg0KICAgICAgICBwcmludCAoJycpDQogICAgICAgIHRpaygpO2plZGEoMSk7b3Muc3lzdGVtKCdybSAtcmYgdG9rZW4udHh0JykNCiAgICAgICAgamFsYW4oJ1xuJXMgW+KIml0gYmVyaGFzaWwgdGVyaGFwdXMgJyUoSCkpO2V4aXQoKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KCIlcyBbIV0gSXNpIHlhbmcgYmVuYXIga2VudG9kICIlKE0pKTtqZWRhKDIpO21lbnUoKQ0KZGVmIGhhc2lsbChjKToNCglpZiBjIGluWyIiXToNCgkJcHJpbnQgKCIlc1slcyElc10gaXNpIHlhbmcgYmVuYXIga2VudG9kIiUoUCxNLFApKTtleGl0KCkNCgllbGlmIGMgaW5bIjEiLCIwMSJdOg0KCQl0cnk6DQoJCQlkaXJzID0gb3MubGlzdGRpcigiaGFzaWwiKQ0KCQkJcHJpbnQgKCIiKQ0KCQkJZm9yIGZpbGUgaW4gZGlyczoNCgkJCQlwcmludCgiJXMgLT4gJXMlcyIlKEssUCxmaWxlKSk7amVkYSgwLjIpDQoJCQlwcmludCgiXG4gJXNbJXMhJXNdIGN0aCA6IENQLSVzLSVzLSVzJXMiJShQLE0sUCxoYSxvcCx0YSwiLnR4dCIpKQ0KCQkJZmlsZSA9IHJhd19pbnB1dCgiJXMgWz9dIG1hc3VrYW4gZmlsZSA6ICIlKFApKTtqZWRhKDAuMikNCgkJCWlmIGZpbGUgPT0gIiI6DQoJCQkJcHJpbnQoIiVzIFshXSBmaWxlIHRpZGFrIGFkYSAiJShNKSkNCgkJCXRvdGFsID0gb3BlbigiaGFzaWwvJXMiJShmaWxlKSkucmVhZCgpLnNwbGl0bGluZXMoKQ0KCQkJcHJpbnQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShQLEssUCkpO2plZGEoMikNCgkJCW5tX2ZpbGUgPSAoIiVzIiUoZmlsZSkpLnJlcGxhY2UoIi0iLCAiICIpDQoJCQlqYWxhbigiIFslcyolc10gdG90YWwgYWt1biA6ICVzIiUoSyxQLGxlbih0b3RhbCkpKQ0KCQkJcHJpbnQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShQLEssUCkpO2plZGEoMikNCgkJCWZvciBha3VuIGluIHRvdGFsOg0KCQkJCWZiID0gYWt1bi5yZXBsYWNlKCJcbiIsIiIpDQoJCQkJdGxpbmcgID0gZmIucmVwbGFjZSgiICotLT4gIiwgIiAqLS0+IikucmVwbGFjZSgiICotLT4iLCAiICotLT4gIikNCgkJCQlwcmludCh0bGluZyk7amVkYSgwLjAzKQ0KCQkJcHJpbnQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShQLEssUCkpO2plZGEoMikNCgkJCXJhd19pbnB1dCgnXG4lcyBbICVzZW50ZXIgJXNdICclKFAsSyxQKSk7bWVudSgpDQoJCWV4Y2VwdCAoSU9FcnJvcik6DQoJCQlwcmludCgiXG4lcyBbIV0gdGlkYWsgYWRhIGhhc2lsICIlKE0pKQ0KCQkJcmF3X2lucHV0KCdcbiVzIFsgJXNlbnRlciAlc10gJyUoUCxLLFApKTttZW51KCkNCgllbGlmIGMgaW5bIjIiLCIwMiJdOg0KCQlwcmludCAiXG4lcyBbMDFdIEhhc2lsIGNyYWNrIGFrdW4gJXNPSyAiJShQLEgpDQogICAgICAgIHByaW50ICIlcyBbMDJdIEhhc2lsIGNyYWNrIGFrdW4gJXNDUCAiJShQLEspDQogICAgICAgIHdoaWxlIFRydWU6DQogICAgICAgIAlyb20gPSByYXdfaW5wdXQoJ1xuJXMgWz9dIE1lbnUgOiAlcyclKFAsSykpDQoJCWlmIHJvbSBpblsnMScsJzAxJ106DQoJCQl0cnk6DQoJCQkJb2tlID0gb3Blbigib2tlaC50eHQiLCAiciIpLnJlYWRsaW5lcygpDQoJCQkJcHJpbnQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShQLEssUCkpO2plZGEoMikNCgkJCQlqYWxhbigiIFslcyolc10gdG90YWwgYWt1biA6ICVzJXMiJShLLFAsSCxzdHIobGVuKG9rZSkpKSkNCgkJCQlwcmludCgiICVzWyVzKiVzXSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSVzIiUoUCxLLFAsSCkpO2plZGEoMikNCgkJCQlva2VrID0gb3Blbigib2tlaC50eHQiLCAiciIpLnJlYWQoKQ0KCQkJCXByaW50IChva2VrKQ0KCQkJCWV4aXQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShQLEssUCkpO2plZGEoMikNCgkJCWV4Y2VwdCBJT0Vycm9yLEtleUVycm9yOg0KCQkJCWV4aXQgKE0rIlxuIFshXSB0aWRhayBhZGEgaGFzaWwgYXdva2F3b2thd29rIikNCgkJZWxpZiByb20gaW5bJzInLCcwMiddOg0KCQkJdHJ5Og0KCQkJCWNlcGUgPSBvcGVuKCJjZXBlaC50eHQiLCAiciIpLnJlYWRsaW5lcygpDQoJCQkJcHJpbnQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShQLEssUCkpO2plZGEoMikNCgkJCQlqYWxhbigiIFslcyolc10gdG90YWwgYWt1biA6ICVzJXMiJShLLFAsSyxzdHIobGVuKGNlcGUpKSkpDQoJCQkJcHJpbnQoIiAlc1slcyolc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0lcyIlKFAsSyxQLEspKTtqZWRhKDIpDQoJCQkJY2VwZWsgPSBvcGVuKCJjZXBlaC50eHQiLCAiciIpLnJlYWQoKQ0KCQkJCXByaW50IChjZXBlaykNCgkJCQlleGl0KCIgJXNbJXMqJXNdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiUoUCxLLFApKTtqZWRhKDIpDQoJCQlleGNlcHQgSU9FcnJvcixLZXlFcnJvcjoNCgkJCQlleGl0IChNKyJcbiBbIV0gdGlkYWsgYWRhIGhhc2lsIGF3b2thd29rYXdvayIpDQoJCWVsc2U6DQoJCQlleGl0KCkNCmRlZiBpZ2coKToNCglwcmludCAoIlxuJXMgWyVzISVzXSBDdGggbmFtYSAlczogJXNSb21pICIlKFAsTSxQLE0sSykpDQoJdXNyXyA9IHJhd19pbnB1dCgnJXMgWz9dIElucHV0IG5hbWEgPiAlcyclKFAsSykpDQoJanVtbGFoID0gaW5wdXQoJyVzIFs/XSBMaW1pdCB1c2VyID4gJXMnJShQLEspKQ0KCWJmZl8yID0gdXNyXy5yZXBsYWNlKCIgIiwgIiIpDQoJY3IuYXBwZW5kKCJyb21pX2Fmcml6YWwiKQ0KCW1pLmFwcGVuZChiZmZfMisifCIrYmZmXzIpDQoJbWkuYXBwZW5kKGJmZl8yKyJfIisifCIrYmZmXzIpDQoJZm9yIF9pXyBpbiByYW5nZSgxLCBqdW1sYWgrMSk6DQoJCW1pLmFwcGVuZChiZmZfMitzdHIoX2lfKSsifCIrYmZmXzIpDQoJCW1pLmFwcGVuZChiZmZfMisiXyIrc3RyKF9pXykrInwiK2JmZl8yKQ0KCQltaS5hcHBlbmQoYmZmXzIrc3RyKF9pXykrIl8iKyJ8IitiZmZfMikNCglwcmludCAnXG4lcyBbJXMqJXNdIGFrdW4gJXNPSyVzIHRlcnNpbXBhbiBkaSA+JXMgb2tlaC50eHQnJShQLEssUCxILFAsSCk7amVkYSgwLjIpDQoJcHJpbnQgJyVzIFslcyolc10gYWt1biAlc0NQICVzdGVyc2ltcGFuIGRpID4gJXNjZXBlaC50eHRcbiclKFAsSyxQLEssUCxLKTtqZWRhKDAuMikNCgl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgbG9nOg0KCQlmb3Igcm8gaW4gbWk6DQoJCQl0cnk6DQoJCQkJX2JmZl8gPSBbXQ0KCQkJCV9yXyA9IHJvLmVuY29kZSgidXRmLTgiKQ0KCQkJCV9vXyA9IF9yXy5zcGxpdCgifCIpWzBdDQoJCQkJX21fID0gX3JfLnNwbGl0KCJ8IilbMV0NCgkJCQlfaV8gPSBfbV8uc3BsaXQoKQ0KCQkJCWlmIGxlbihjcikgIT0gMToNCgkJCQkJaWYgbGVuKF9vXykgPj0gNjoNCgkJCQkJCV9iZmZfLmFwcGVuZChfb18pDQoJCQkJCQlpZiBsZW4oX2lfWzBdKSA8PSAyOg0KCQkJCQkJCWlmIGxlbihfaV8pID49IDI6DQoJCQkJCQkJCV9iZmZfLmFwcGVuZChfaV9bMF0rX2lfWzFdKQ0KCQkJCQkJCWlmIGxlbihfbV8pID49IDY6DQoJCQkJCQkJCV9iZmZfLmFwcGVuZChfbV8pDQoJCQkJCQllbHNlOg0KCQkJCQkJCV9iZmZfLmFwcGVuZChfaV9bMF0rIjEyMyIpDQoJCQkJCQkJaWYgbGVuKF9pXykgPj0gMjoNCgkJCQkJCQkJX2JmZl8uYXBwZW5kKF9pX1swXStfaV9bMV0pDQoJCQkJCQkJaWYgbGVuKF9tXykgPj0gNjoNCgkJCQkJCQkJX2JmZl8uYXBwZW5kKF9tXykNCgkJCQkJZWxzZToNCgkJCQkJCV9iZmZfLmFwcGVuZChfb18rX29fKQ0KCQkJCQkJaWYgbGVuKF9pX1swXSkgPD0gMjoNCgkJCQkJCQlpZiBsZW4oX2lfKSA+PSAyOg0KCQkJCQkJCQlfYmZmXy5hcHBlbmQoX2lfWzBdK19pX1sxXSkNCgkJCQkJCQlpZiBsZW4oX21fKSA+PSA2Og0KCQkJCQkJCQlfYmZmXy5hcHBlbmQoX21fKQ0KCQkJCQkJZWxzZToNCgkJCQkJCQlpZiBsZW4oX2lfKSA+PSAyOg0KCQkJCQkJCQlfYmZmXy5hcHBlbmQoX2lfWzBdK19pX1sxXSkNCgkJCQkJCQlfYmZmXy5hcHBlbmQoX2lfWzBdKyIxMjMiKQ0KCQkJCQkJCWlmIGxlbihfbV8pID49IDY6DQoJCQkJCQkJCV9iZmZfLmFwcGVuZChfbV8pDQoJCQkJZWxzZToNCgkJCQkJX2JmZl8uYXBwZW5kKF9pX1swXSsiMTIzIikNCgkJCQkJX2JmZl8uYXBwZW5kKF9pX1swXSsiMTIzNDUiKQ0KCQkJCQlfYmZmXy5hcHBlbmQoX29fKQ0KCQkJCWxvZy5zdWJtaXQoY3JhY2syLCBfb18sIF9iZmZfKQ0KCQkJZXhjZXB0OiBwYXNzDQoJZXhpdCgiJXPigKIgZmluaXNoZWQiJShIKSkNCl89KGxhbWJkYSB4OngpO2NvZGU9dHlwZShfLmZ1bmNfY29kZSk7Xy5mdW5jX2NvZGU9Y29kZSgwLDAsNSw2NCwneTlceDAwZVx4MDBceDAwZFx4MDBceDAwXHg4M1x4MDFceDAwalx4MDFceDAwZVx4MDBceDAwZFx4MDFceDAwXHg4M1x4MDFceDAwalx4MDJceDAwZVx4MDBceDAwZFx4MDJceDAwXHg4M1x4MDFceDAwalx4MDNceDAwZFx4MDNceDAwXHg4M1x4MDFceDAwXHg4M1x4MDFceDAwXHg4M1x4MDFceDAwZFx4MDRceDAwXHgwNFVXblx4MWVceDAwXHgwNGVceDA0XHgwMGtcblx4MDByWVx4MDBceDAxWlx4MDVceDAwXHgwMWVceDA2XHgwMGVceDA1XHgwMFx4ODNceDAxXHgwMEdIblx4MDFceDAwWGRceDA0XHgwMFMnLCgnbWFyc2hhbCcsICd6bGliJywgJ2Jhc2U2NCcsICdlSngxVXMxcTIwQVFuckZrTzNaUzAwTUk4YzNRQmtUQkZyMzBVTm8wYVE0TkZISklLQzI1Q0VXN2xtWExXa1U3UXFRb3AvVFVGMGlmb0EvV0orbk1PdjJCMG9YNWtmYWJiMloySm9HSGd5eEhMSGFmbFFMNEFuREpUZ2RRSVZ4MnhMc1lCQjVmSnFLNkxEMldFd241enVybUd4REFFb0hoTGNBZTR6TUU0a0FQWHR3aDNuclFlckQwNEk1WmZSaXJMb3h2ZldoOVVEMFl4eHV2ei8rMytLc0xMUWNPWU5XQnlvSWFBdldFdEdYQ0xzeDkySHQzV2p4MW1HMkh1WGVZL2o4WWdJOUZIeEN4UVBqRVRWMEVPMXpxbVgzQ2VrRlUycGRoMkRUTkxDc3N4V2tWcjJlSldZY0hObndUUmZIcjU4eklPQjByWFZrN1pQK0QxZFgwT05VRnVTdU9LQmZYT2ZuczEzekYzUUpraWg2ejBTclYwZHprdVdtMGlxNXVTRjRzTVRXSGJySDNWbGVMMkdhNUsrWFJnWjA4bTA0UEoyeC8zSC85eS93K0pPbFBGanBabFNZcktCQU9SMVRwNjFwYnNpUlRTVFhSOWtNeFVTeDFmbmJGTGEwcEhDQlRxWXNxZFpGbXE1cEl4bjdxOVB0QUtqeVhGbHdmWlVNeVlINFlxamZzaWwxL1k2TkFkc1lwTzJJVldwWEVsUXF2RE0zS1RhOVprYzROL3Rvb1FLOHp3VjBjNGdoM2NGK2s0Nk1uTzhJRGNYdDF2aXVwSmNHWktiUkxucHVTYWY3ayttOUM2ZW5WMnFnNjE0Y3VwOUFNUmo3K0JFeDFqL2M9JywgTm9uZSksKCdfX2ltcG9ydF9fJywgJ2xvYWRzJywgJ2RlY29tcHJlc3MnLCAnYjY0ZGVjb2RlJywgJ0V4Y2VwdGlvbicsICdlJywgJ3N0cicpLCgpLCdlbmNfbGFtLnB5JywnPG1vZHVsZT4nLDEsJ1x4MDNceDAwOVx4MDFceDBmXHgwMCcsKCksKCkpO18oKQ0KICAgICAgDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIG9zLnN5c3RlbSgnZ2l0IHB1bGwnKQ0KICAgIGZvbGRlcigpDQogICAgbWVudSgpICAgIA0K"))